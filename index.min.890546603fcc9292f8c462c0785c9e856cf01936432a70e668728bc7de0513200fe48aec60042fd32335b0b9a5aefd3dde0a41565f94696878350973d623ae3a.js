var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/tutorials/atmosphere-pro/",title:"@mosphere pro",description:"Learn how the Atsign atmosphere pro app works on the atPlatform",content:""}).add({id:1,href:"/docs/",title:"atPlatform Documentation",description:"Documentation for the atPlatform.\n",content:"I want to\u0026hellip; #\rGet Started Follow our getting started guide here\n   Learn the SDK See our SDK Documentation here\n    Learn the platform See our infrastructure overview here\n   Follow a tutorial Find a specific tutorial here\n    Featured Tutorials #\r@moshere pro An open source end-to-end encrypted file sharing app\n   @dude app Send an end-to-end encrypted duuuuuuude to your friends\n    dess - AWS Host your own secondary server on Amazon Web Services\n   dess - GCP Host your own secondary server on Google Cloud Platform\n    More Options #\rContribute to this site \u0026rarr;    Glossary \u0026rarr;    "}).add({id:2,href:"/docs/start/flutter/",title:"Flutter Development",description:"Get started with Flutter on the atPlatform\n",content:""}).add({id:3,href:"/docs/sdk/flutter/",title:"Flutter Reference",description:"My SEO description\n",content:""}).add({id:4,href:"/docs/sdk/flutter/overview/",title:"Overview",description:"Overview of the atPlatform Flutter SDK",content:"TODO YOUR PAGE CONTENT GOES HERE\u0026hellip;\n"}).add({id:5,href:"/docs/contribute/shortcodes/",title:"Shortcodes tutorial",description:"atsign.dev shortcodes tutorial",content:""}).add({id:6,href:"/docs/contribute/style-guide/",title:"Style Guide",description:"Style guide for contributing to atsign.dev",content:"Layouts #\rIn addition to Hugo\u0026rsquo;s default list \u0026amp; single layouts, the docs section also supports codelab-list \u0026amp; codelab-single. Their inner workings are explained in the frontmatter section.\nFrontmatter #\r   Property Supported Layouts Description     title ALL Title of the page   layout ALL Hugo layout of the page   lead ALL except codelab-step A lead to show below the title, this should be short and serves to provide a little more context to the title.   description ALL SEO description for the page, this should be descriptive of the content for the page, and include keywords that represent both the content \u0026amp; the overall site\u0026rsquo;s purpose.   draft ALL Whether this page is a draft or not, if true, this page will not be built on the production site.   toc docs/single, docs/list Whether this page should generate a table of contents from headers.   autolinks docs/list Whether this page should automatically generate links for sub-pages.   weight ALL except codelab-step Used to order content in navigation   doneLink codelab-list Where to send the visitor if they press \u0026lsquo;done\u0026rsquo; at the end of the codelab.   exitLink codelab-list Where to send the visitor if they press \u0026rsquo;exit codelab\u0026rsquo;.   order codelab-single Used to order steps in a codelab, similar to \u0026lsquo;weight\u0026rsquo; property.    Content #\r No HTML in markdown content files.\nHTML shall be written in /layouts/ for the purposes of maintaining consistency across all other pages. Keep things consistent across sections.\nContent pages within a section should be written such that they match the format of other content within the section. There may be some exceptions, but keep this in mind when contributing. Examples should be clear and concise.\nMake sure to use examples that are accurate to the topic, and are easy to understand. File names should be concise and prioritize \u0026lsquo;-\u0026rsquo; over \u0026lsquo;\u0026rsquo; We\u0026rsquo;ve opted to use \u0026lsquo;-\u0026rsquo; instead of \u0026lsquo;\u0026rsquo; in link names to keep things consistent.\nThe only exception to this is when \u0026lsquo;_\u0026rsquo; is part of a name, like in \u0026lsquo;at_server\u0026rsquo;, this also allows us to distinguish between names and spaces in the url.\nLinks should be as pretty as possible for sharing purposes.  Building Layouts #\r Use bootstrap for styling where available.\nAll styling should be done in bootstrap, unless it is unable to achieve what you are after. Ensure compatibility when writing custom styles and layouts. This includes compatibility for dark/light modes, various screen sizes, and has good browser support.  JavaScript #\rThis site is using purgeCSS for the staging and production builds. If you write JavaScript that modifies the DOM in any way, ensure that all style selectors are added to the safelist in config/postcss.config.js.\nAssets #\r External assets and images should be stored in the static folder.\nSite-only images should be stored at page level where possible, or in the assets folder if it is used in multiple places across the site. See here for more information. Use FontAwesome for icons.  "}).add({id:7,href:"/docs/atplatform/overview/",title:"The atPlatform Overview",description:"Overview of the atPlatform",content:""}).add({id:8,href:"/docs/atplatform/architecture/",title:"Architecture",description:"Architectural overview of the atPlatform",content:""}).add({id:9,href:"/docs/tutorials/at-dude/",title:"atDude Tutorial",description:"Learn how the atDude app works on the atPlatform",content:""}).add({id:10,href:"/docs/sdk/flutter/services_and_managers/",title:"Core SDK Services",description:"Learn about the core atPlatform Flutter SDK services",content:""}).add({id:11,href:"/docs/start/java/",title:"Java Development",description:"Get started with Java on the atPlatform\n",content:""}).add({id:12,href:"/docs/sdk/java/",title:"Java Reference",description:"My SEO description\n",content:""}).add({id:13,href:"/docs/tutorials/dess/aws/",title:"Setup dess on AWS (Amazon Web Services) Platform",description:"My SEO Description\n",content:""}).add({id:14,href:"/docs/tutorials/dess/gcp/",title:"Setup dess on GCP (Google Cloud) Platform",description:"My SEO Description\n",content:""}).add({id:15,href:"/docs/tutorials/at_demos/",title:"at_demos",description:"My SEO description\n",content:""}).add({id:16,href:"/docs/start/iot/",title:"IOT devices",description:"Get started with IOT (Internet of Things) devices on the atPlatform\n",content:""}).add({id:17,href:"/docs/atplatform/specification/",title:"Protocol Specification",description:"The specification of the atProtocol on the atPlatform",content:""}).add({id:18,href:"/docs/start/other/",title:"Other",description:"Other ways to get started on the atPlatform\n",content:""}).add({id:19,href:"/docs/atplatform/root-server/",title:"Root Server",description:"Learn about the atPlatform root server",content:""}).add({id:20,href:"/docs/atplatform/secondary-server/",title:"Secondary Server",description:"Learn about atPlatform secondary edge servers",content:""}).add({id:21,href:"/docs/contribute/",title:"Contribute to this Site",description:"How to contribute to atsign.dev",content:""}).add({id:22,href:"/docs/reference/",title:"Reference",description:"My SEO description\n",content:""}).add({id:23,href:"/docs/atplatform/",title:"The atPlatform",description:"My SEO description\n",content:""}).add({id:24,href:"/docs/sdk/",title:"SDK Reference",description:"My SEO description\n",content:""}).add({id:25,href:"/docs/tutorials/",title:"Samples \u0026 Tutorials",description:"My SEO description\n",content:""}).add({id:26,href:"/docs/tutorials/dess/",title:"dess",description:"Learn about the atPlatform distributed edge secondary server",content:""}).add({id:27,href:"/docs/start/",title:"Get Started",description:"Get started on the atPlatform\n",content:""}).add({id:28,href:"/docs/reference/atsign/",title:"atSign",description:"Learn about what an atSign is in the atPlatform\n",content:"What is an atSign #\rAn atSign is a handle (e.g. @alice) that functions as your digital identity. It uses end-to-end encryption to ensure that your data is 100% owned and controlled by you.\nAn atSign has two states: deactivated and activated. To activate an atSign, CRAM authenticate into your secondary server. After successful CRAM authentication, your atSign is activated where a PKAM key pair is generated by your device and the CRAM key will be invalid; so that only you own the keys to your secondary server.\nEach atSign has a unique key that is used to verify whether you are the atSign’s rightful owner. After first activating an atSign, be sure to save its corresponding key in a secure location. You’ll need it to sign back into the app or use other apps on the atPlatform.\nExample #\rAlice has created their own atSign called @alice. Anyone who looks up @alice can only view the information that they’ve made public through @wavi, an app that lets them set up and customize their public profile. They’ll have the freedom to adjust it as needed, and those changes will be viewable in a matter of seconds.\nWhat you can do with an atSign #\rAt the moment, you can pair your atSign with any app on the atPlatform (the underlying technology behind atSigns) to enable the app to access, but not store, your data. The number of things you can do with your atSign will increase as more and more of these atApps are built.\nWhile we wait for the rest of the Internet to catch up, you can get ahead of the game by downloading the first batch of recently launched atApps. These include @mospherePro, an end-to-end encrypted file sharing app, @buzz, an entirely new and private way to connect with others, and more.\nDiscover these atApps here.\n"}).add({id:29,href:"/docs/reference/pricing-and-costs/",title:"Pricing / Costs",description:"Reference on the pricing and costs on atSigns\n",content:"Since the atPlatform is fully open sourced and everyone can contribute, there is no cost for developers! When you make an app on the atPlatform, people that use your apps will not have to pay any fees for infrastructure or storage! The way that Atsign generates revenue is by using our special identifier which is known as an atSign. An atSign can come in many flavors with corresponding prices ranging from free, $10, $100, $1000, $5000. If you opt-in for the vanity atSign the prices increase as the atSign of your liking decreases in length and complexity. For each paid atSign you own, there is a $10 annual renewal fee. This fee does not apply to the free atSigns. What makes atSigns so awesome is that if your app is the first one someone pairs an atSign with, after buying their atSign, we pay you commission on that. Yep, you don\u0026rsquo;t pay us, we pay you.\nPaid atSigns #\rFor paid atSigns the options are listed below:\n For $10: A Hybrid atSign is an sign that ends with an underscore and up to four numbers:  atsignexample_01\n   For $100: A Custom atSign is an sign that is any combination of words, numbers, or even emojis! (at least five characters, or four characters if it includes a number or emoji):  atsignexample atest tes5\n   For $1000: A Custom atSign that is only three or four characters (no numbers):  test four tes dog\n   For $5000: A Custom atSign that is only three characters:  007 te5 r4n     Free atSigns #\rFor a FREE atSign there exists an atSign generator which creates a new set of atSigns at random for you to choose from! You are given two options: the first option requires you to add some pre-generated atSigns while the second option lets you generate an atSign based on your interests using super-secret mode. Let\u0026rsquo;s say you like music and sports, the atSign generator would perform its magic and dish out:\n* melodic74 * canopy22wild * 10axepowernoise * Modest89rackets * 90bossaball  Get started for free   "}).add({id:30,href:"/docs/reference/encryption/",title:"Encryption",description:"Definition of the term encryption\n",content:"Definition #\rEncryption is a means of achieving privacy. It is a part of cryptography which has the Greek origin meaning of \u0026ldquo;secret writing\u0026rdquo;. The goal of encryption is that assuming that an unwanted third party is eavesdropping on an insecure channel, said person would not be able to comprehend the transmitted information. Decryption is the process of converted encrypted information into a comprehensible format. Encryption and Decryption algorithms are known as ciphers. Encryption uses a key which is a set of values that the cipher, as an algorithm, will operate on. Encryption and Decryption go back a long way with one of the most well known ciphers being the Caesar Cipher\nHow we do it #\rThe atPlatform implements end-to-end encryption that is best illustrated with the following example: @alice wishes to share her phone number with her friend @bob. To do this, @alice, who is on her own device, prompts her own secondary server to direct phone @alice at her friend @bob\u0026rsquo;s secondary server. From here, a shared key is generated for @bob (@bob:shared_key@alice).\nThis shared key uses the same encryption process as the Symmetric Key Encryption, which is called AES (Advanced Encryption Standard) and involves three block ciphers: AES-128, AES-192 and AES-256.\nThe atProtocol specifically uses AES-256 for Data Encryption Keys.\nThe RSA (Rivest-Shamir-Adleman) encryption algorithm is then used to encrypt the shared key from the above example with @bob\u0026rsquo;s public key. The atProtocol specifically utilizes RSA 2048. Note, that because the RSA algorithm is an Asymmetric Key Encryption method, a public and private key are generated.\nIf you want to read more about Encryption and how it works on the atPlatform check this Medium article!\nRelated Sources #\rPublic and Private Keys \u0026rarr;    Self-Encryption Key \u0026rarr;    Privacy \u0026rarr;    "}).add({id:31,href:"/docs/reference/privacy/",title:"Privacy",description:"Definition of the term privacy\n",content:"We live in an age of information. Information is an asset that has a similar value much like other assets that you might own. As an asset, that information must be secured from potential attacks or unauthorized access. There are several security goals that must be considered:\n Confidentiality: Hidden from unauthorized access. Integrity: Protected from unauthorized change. Availability: Available to an authorized party when needed. Authentication/Liveness: Ensuring the session is \u0026ldquo;current\u0026rdquo; rather than a replay of an earlier session. For example, if you are chatting with a certain person, it would be beneficial to know that the person you are chatting with is indeed who they say they are ano not an unwanted intruder posing as the trusted person. Non-repudiation: Assurance that an actor behaved in a way they cannot deny.  I.e. proving that a sender sent a message or receiver received it.    "}).add({id:32,href:"/docs/reference/polymorphism/",title:"Polymorphism",description:"Definition of Polymorphism\n",content:"Definition #\rThe condition of occuring in several different forms.\nPolymorphism on the atPlatform is the ability to share different data depending on the context of who’s asking. atPlatform applications enable you to setup multiple personas for different areas of your life. When you share data with someone else, the value of that data may be different depending on the person receiving that data. This is true for both sides, you may ask for data from different sources and get a different answer for each one.\nPolymorphic Data #\rThe @buzz app is a stellar example of polymorphic data on the atPlatform. @buzz is like your contacts application, but with a twist. Rather than manually entering details for all of your contacts, and having to deal with duplicate contact entries from trying to sync all of your contacts over the cloud, you simply connect with someone through their atSign. In @buzz, they can create and share a specific persona with you. For example, I might want to share my work phone and email with colleagues, but my personal phone and a different email with friends. I can set up separate “work” and “friends” personas with each set of information, so when I connect with someone new, all I have to do is share the correct persona with that person. Better yet, if I want to share multiple personas, I can do that too! If I move or change my email address, I can update my information in the app, and my contacts have access to the new information and don’t have to make any edits themselves.\nExample #\r@alice’s work persona may have a different value for email than her personal persona. When she shares her email to her colleagues, they will receive her work email, however when she shares it to her friends and family, they will see her personal email. As she updates the data in each of her personas, the changes will be reflected to each person that she has shared the data with.\nTo learn more about polymorphism see this article post\nRelated Sources #\rNamespace \u0026rarr;    "}).add({id:33,href:"/docs/reference/public-private-keys/",title:"Public and Private Keys",description:"Definition of public and private keys\n",content:"Definition #\rA private key is used in asymmetric key cryptography. Asymmetric key cryptography is based on applying mathematical functions to numbers to achieve personal secrecy. It uses two keys, one being the private key. If you think of decryption as locking and unlocking padlocks with keys, then the padlock that is locked with a public key can only be unlocked with its corresponding private key.\nOn the other hand, public keys are distributed to the trusted masses. This is done through a public-key distribution channel. This channel should provide authentication and integrity. Someone should not send their public key to the community pretending to have a different public key. Everyone should have their own private and public keys. For example, Bob only needs one private key to receive all correspondence in the community, but Alice needs n public keys to communicate with n entities in the community, one public key for each entity. In other words, Alice needs a ring of public keys.\nHow it works at Atsign #\rA key in the atProtocol can be formed by using any alphanumeric and special characters (UTF-8) excluding \u0026ldquo;@\u0026rdquo;, \u0026ldquo;:\u0026rdquo; and a white space (\u0026quot; \u0026ldquo;). A key in a secondary can be any of the following 5 types:\n  Public Key\n  A public key is a key which can be looked up by any atSign holder.\n  A public key should be part of the scan verb result.\n  Format of the public key should be public:\u0026lt;identifier\u0026gt;:\n  Example:\npublic:location@alice\n The owner of the secondary should be allowed to update or delete the value of a public key.\n   Self Key\n  A Self key is a key which cannot be looked up any atSign holder other than the one created it.\n  A Self key should not be returned in a scan verb result.\n  Format of the Self key should be privatekey:\u0026lt;identifier\u0026gt;:\n  Example:\nprivatekey:pk1@alice\n The owner of the secondary should be allowed to update or delete the value of a private key.\n   Shared key\n A shared key can only be looked up by an atSign holder with whom the data has been shared. A shared key should be part of the scan verb result only for the person who created it and the specific person it has been shared with. Format of the key shared with someone else should be\ncached::\u0026lt;identifier\u0026gt;:  Example:\n@bob:phone@alice\n Note: Above Key should be part of scan verb result for only @alice and @bob\n  The owner of the secondary should be allowed to update or delete the value of a user key.\n More context on shared keys: We know that Atsign uses AES-256 \u0026amp; RSA-2048 for symmetric and asymmetric encryption respectfully.\n  RSA-2048 can encrypt up to 214 bytes which does not constitute for a lot of data. However, because it is asymmetric, we can use it to ensure that you are you by verifying that you have your private key.\n  AES-256 can encrypt around a whopping 250 million terabytes which is practically unlimited. The downside is that because this is a symmetric key, we cannot use it to authorize that you are you since this is shared with the recipient.\n  To remediate this, I can generate an AES(shared) key, and encrypt it using your public RSA key. Then we can decrypt said AES key using your private RSA key. Since you are the only holder of your private key, I can ensure that only the two of us hold the AES key. Now we can share information back-and-forth safely using the AES key as a means of encryption/decryption.\n  Private Key\n Private keys start with an underscore(_) and are not displayed in scan results. Private keys can only be looked up by the owner of the secondary    Cached Key\n  A cached key is a key that was originally created by another atSign owner but is now cached on the Secondary Server of another person\u0026rsquo;s atSign as they were given permission to cache it.\n  A cached key should be listed in the scan verb result for the atSign owner who cached it.\n  Format of the key shared with someone else should be\ncached::\u0026lt;identifier\u0026gt;:\n  Example:\ncached:@bob:phone@alice\n The person who has cached the key should not be allowed to update the cached key.\n  An atSign owner who has created and shared the key should be allowed to update a cached key, and if the \u0026ldquo;autoNotify\u0026rdquo; config parameters is set to true, the updated value should be notified (please refer to the notify verb) and the cached key updated with the new value.\n  If the person who originally shared the keys set the CCD (Cascade delete) to true, the cached key will be deleted when the original key is deleted.\n   "}).add({id:34,href:"/docs/reference/self-encryption-key/",title:"Self-Encryption Key",description:"Definition of Self-Encryption Key at Atsign\n",content:"Definition #\rSelf-Encryption key is an AES symmetric key that you own for encrypting data for yourself.\natPlatform #\rIn the atPlatform, the self-encryption key is used to encrypt data that is stored in your own secondary server. It is crucial that this key is kept secret and owned only by you so that third parties like Atsign cannot see your data.\nThe self-encryption key is generated during the CRAM process when your PKAM RSA keypair is generated and your atSign is activated.\nRelated Resources #\ratSign \u0026rarr;    Encryption \u0026rarr;    Public and Private Keys \u0026rarr;    CRAM \u0026rarr;    PKAM \u0026rarr;    "}).add({id:35,href:"/docs/reference/cram/",title:"CRAM",description:"Definition of CRAM (challenge response authentication method)\n",content:"Definition #\rCRAM is a term you may have heard of when reading about the atPlatform. CRAM stands for challenge response authentication mechanism. It is an algorithm/mechanism used in cryptography commonly used for authentication in protocols.\natPlatform #\rYou use your CRAM secret to activate your atSign and authenticate into your (secondary server)[/docs/atplatform/secondary-server] secondary server for the first time. Once authenticated, you may add, update, delete, and lookup keys in your own secondary server.\nWhen users get their atSign from atsign.com, they receive their CRAM secret in the form of a QR code. A CRAM secret is just a long string of randomly generated characters. The CRAM secret can also be fetched from a REST API since sometimes the QR code can be cumbersome. It is recommended that you let the SDK handle these API requests as it is easier and safer.\nCRAM is made easy with the atPlatform. Since the CRAM secret was generated and given by Atsign, that would be like Atsign generating your password for you. To opposite this, atPlatform\u0026rsquo;s SDKs and authentication services (such as at_onboarding_flutter) make it easy to generate a .atKeys file for subsequent logins to your secondary. This .atKeys file is generated by your device and contains the necessary keys to encrypt/decrypt data in your secondary server and the secondary server of other atSigns. The .atKeys file is closely related to PKAM which you can read more about here.\natProtocol #\rIn the atProtocol, CRAM is a verb.\nThe cram verb is used to boostrap authenticate one\u0026rsquo;s own self as an owner of a Secondary Server. It is intended to be used once until a set of PKI keys are cut on the owner\u0026rsquo;s mobile device and from then on we use the pkam verb.\nThe following regex represents the syntax of the cram verb: r'^cram:(?\u0026lt;digest\u0026gt;.+$)'\nLearn more about the cram verb here .\nKey Definitions #\r CRAM: challenge response authentication mechanism CRAM Secret: a long string of characters associated with each atSign for activation .atKeys file: holds encryption keys for PKAM authenticating OTP: one-time password  Related Resources #\rProtocol Specification \u0026rarr;    Secondary Server \u0026rarr;    Encryption \u0026rarr;    PKAM \u0026rarr;    "}).add({id:36,href:"/docs/reference/pkam/",title:"PKAM",description:"Definition of PKAM (public key authentication mechanism)\n",content:"Definition #\rPKAM stands for public key authentication mechanism. It is a mechanism for encrypting/decrypting data between two parties.\natPlatform #\rThe atPlatform\u0026rsquo;s packages and SDKs help apps generate a RSA PKAM public/private keypair and save this in a .atKeys file containing these keys. Since Atsign provided the CRAM secret, this poses an vulnerability since this is a shared secret between you and Atsign. To avert this, a new RSA PKAM keypair is generated on your device and the CRAM secret is no longer valid. The PKAM keypair is used for all subsequent authentications, and as you are the only one with access to the private key, you are the only one who is able to authenticate.\nThe PKAM public key is given out to other clients who want to send data to you. The data they send to you is encrypted using your public key and is decrypted using your private key. Read more on asymmetric encryption here.\nThe PKAM private key used by the client to authenticate into their own secondary server. It is just like the CRAM secret except it was generated by you (as opposed by Atsign) and completely owned by you.\natProtocol #\rIn the atProtocol PKAM is a verb.\nThe pkam verb is used to authenticate one\u0026rsquo;s own self as an owner of a Secondary Server using a PKI style authentication.\nThe following regex represents the syntax of the pkam verb: ^pkam:(?\u0026lt;signature\u0026gt;.+$)\nLearn more about the pkam verb here.\nKey Definitions #\r PKAM: public key authentication mechanism PKI: public key infrastructure RSA: \u0026ldquo;Rivest-Shamir-Aldeman\u0026rdquo; is an assymetric encryption algorithm. Read more here  Related Resources #\rProtocol Specification \u0026rarr;    Secondary Server \u0026rarr;    Encryption \u0026rarr;    CRAM \u0026rarr;    "}).add({id:37,href:"/docs/reference/namespace/",title:"Namespace",description:"Definition of Namespace in the atPlatform\n",content:"Definition #\rAtsign\u0026rsquo;s CTO, Colin Constable says this in an interview on Namespaces: \u0026ldquo;Most people are familiar with DNS (domain name system): for example, if you type “cnn.com”, “fox.com”, or “bbc.com”, you get news sites. But you can’t just type in “news” and expect the Internet to tell you which particular flavor of news you want. We need to create namespaces so that humans can remember the name and computers can translate it to Internet protocol. Once there is a namespace like “bbc.com,” you can reliably know that somebody owns that particular space, and it needs to be managed so that there are no clashes. For instance, you don’t want to type “bbc.com” and get sent to Amazon’s home page. That’s why they have to be unique, and we at Atsign created a new namespace with @Namespace.\u0026rdquo;\nFeel free to read more on namespaces here.\natPlatform #\rNamespace is a common term that may occur when reading about the atPlatform. To put it simply, a namespace is a unique container to place data in. More in the context of the apps, namespaces are just atSigns associated with each app so a secondary server can be aware of which data belongs to who. See an example below.\nExample #\rWhen you ask someone “What is my name?” you will get a different answer for every person you ask. If you ask your parents, they may answer with a sweet nickname they gave you. If you ask your friends, they may answer with your first name. This is how namespaces work. You can ask different namespaces for data and get a different answer every time.\nIn the context of the atProtocol, refer to the example below to improve your understanding.\nExample:\n phone@bob (phone is the key, bob is the namespace) will answer with data=123-123-1234 phone@alice (phone is the key, alice is the namespace) will answer with data=444-444-4444 phone@wavi (phone is the key, wavi is the namespace) will answer with data=555-555-5555  This is the beauty of the atProtocol. Each namespace replied with different information. People control their own data and which applications get what data. With the atPlatform, the people become in control of their own data privacy.\nRelated Resources #\rProtocol Specification \u0026rarr;    Secondary Server \u0026rarr;    Polymorphism \u0026rarr;    "}).add({id:38,href:"/docs/reference/synchronization/",title:"Synchronization",description:"Definition of Synchronization in the atPlatform\n",content:"Definition #\rOn at the atProtocol, your data is encrypted with your self encryption key and stored on your device. Periodically, this data is copied securely over to a dedicated cloud server which only you can decrypt and read since you are the only one who owns the private key. No one else, including Atsign can read your data. This process is known as synchronization.\nHow it works at Atsign #\rFirst we need to touch up on what local \u0026amp; remote secondaries are:\n Remote Secondary: A microservice with a DNS address which makes it addressable, provides a backup of your data in case of loss on the phone, provides a joining place to synchronize data if you have more than one device. Local Secondary: A copy of data that allows for fast interactivity and offline support. Every activated atSign gets their own remote secondary which runs on Atsign\u0026rsquo;s servers. All of your data is signed and encrypted, so Atsign cannot see it.  Synchronization aims to keep both local and remote secondaries with the same data. If by any chance the device is lost, then the data can be retrieved from the remote secondary:\nThere are two main scenarios that require synchronization. The first occurs when your device is offline. Updates are saved to your device but not synced to the server. Once the device goes online, those saved updates get synced to the server. The second scenario is when you have multiple devices: one device is offline while the other is online. Updates from the online device will get synced to the server periodically. However the offline device will not be able to pull the changes until it is back online.\nTo read more about synchronization and how it works check out this Medium Article we made.\n"}).add({id:39,href:"/docs/reference/notification/",title:"Notification",description:"Definition of Notificaton in the atPlatform, the notify verb in the atProtocol, and Definition of Monitor in the atPlatform\n",content:"atPlatform #\rNotification enables developers to notify another atSign of some data event. It is used to send data from one atSign\u0026rsquo;s secondary server to another atSign\u0026rsquo;s secondary server.\nThe atPlatform takes care of all of the heavy lifting with encryption, verb building, transmission, etc,.\nRead more here.\natProtocol #\rThe notify verb enables you to notify the atsign user of some data event.\nThe following is the regex for the notify verb.\nnotify:((?\u0026lt;operation\u0026gt;update|delete):)?(ttl:(?\u0026lt;ttl\u0026gt;\\d+):)?(ttb:(?\u0026lt;ttb\u0026gt;\\d+):)?(ttr:(?\u0026lt;ttr\u0026gt;(-)?\\d+):)?(ccd:(?\u0026lt;ccd\u0026gt;true|false):)?(@(?\u0026lt;forAtSign\u0026gt;[^@:\\s]-)):(?\u0026lt;atKey\u0026gt;[^:]((?!:{2})[^@])+)@(?\u0026lt;atSign\u0026gt;[^@:\\s]+)(:(?\u0026lt;value\u0026gt;.+))?\n   Regex Snippet Explanation, [argument details], (example)     (?\u0026lt;operation\u0026gt;update|delete):)? Operation of the notification (update|delete)   (ttl:(?\u0026lt;ttl\u0026gt;\\d+):)? TTL (time to live), [integer, 1 or more digits, optional argument]   (ttb:(?\u0026lt;ttb\u0026gt;\\d+):)? TTB (time to birth), [integer, 1 or more digits, optional argument]   (ttr:(?\u0026lt;ttr\u0026gt;(-)?\\d+):)? TTR (time to refresh), [integer, 1 or more digits, can be negative, optional argument], (e.g.: 86400 will refresh once a day)   (ccd:(?\u0026lt;ccd\u0026gt;true|false):)? CCD (casecade delete), [boolean, true|false, optional argument], (e.g.: if the sender deletes their original key and ccd is true, the cached key gets deleted on both the sender\u0026rsquo;s server and the recipient\u0026rsquo;s server)   (@(?\u0026lt;forAtSign\u0026gt;[^@:\\s]-)) The atSign the notification is for, [string, negate @ character, required argument]   (?\u0026lt;atKey\u0026gt;[^:]((?!:{2})[^@])+)@(?\u0026lt;atSign\u0026gt;[^@:\\s]+)(:(?\u0026lt;value\u0026gt;.+))? AtKey details, see below, [optional], (signing_publickey@alice)       AtKey Regex Snippet Explanation, [argument details], (example)     (?\u0026lt;atKey\u0026gt;[^:]((?!:{2})[^@])+) AtKey name, [], (e.g. \u0026lsquo;signing_publickey\u0026rsquo;)   @ at separator   (?\u0026lt;atSign\u0026gt;[^@:\\s]+)(:(?\u0026lt;value\u0026gt;.+)) namespace atSign that key belongs to, [string, negate @ character], (e.g. \u0026lsquo;alice\u0026rsquo;)    Response:\nIf the user is the owner, returns a list of received notifications. If a user is pol authenticated user, returns a list of sent notifications.\ndata:[{\u0026quot;id\u0026quot;:\u0026quot;0e5e9e89-c9cb-423b-8972-8c5487215990\u0026quot;,\u0026quot;from\u0026quot;:\u0026quot;@alice\u0026quot;,\u0026quot;to\u0026quot;:\u0026quot;@bob\u0026quot;,\u0026quot;key\u0026quot;:\u0026quot;@bob:phone@alice\u0026quot;,\u0026quot;value\u0026quot;:12345,\u0026quot;operation\u0026quot;:\u0026quot;update\u0026quot;,\u0026quot;epochMillis\u0026quot;:1603714122636}]\nRead more here.\nMonitor #\ratPlatform #\rMonitor uses notifications.\nMonitor is used to receive notifications from the other secondary server.\nRead more here.\natProtocol #\rThe monitor verb streams received notifications.\nThe following is the regex ^monitor$|^monitor ?(?\u0026lt;regex\u0026gt;.-)?)$\nResponse:\nReturns a stream of notifications\n@alice@monitor notification: {\u0026quot;id\u0026quot;:\u0026quot;773e226d-dac2-4269-b1ee-64d7ce93a42f\u0026quot;,\u0026quot;from\u0026quot;:\u0026quot;@bob\u0026quot;,\u0026quot;to\u0026quot;:\u0026quot;@alice\u0026quot;,\u0026quot;key\u0026quot;:\u0026quot;@alice:phone@bob\u0026quot;,\u0026quot;value\u0026quot;:null,\u0026quot;operation\u0026quot;:\u0026quot;update\u0026quot;,\u0026quot;epochMillis\u0026quot;:1603714720965}\nRead more here. here.\n"}).add({id:40,href:"/docs/tutorials/dess/aws/7-activation/",title:"Activation of atSign",description:"Documentation\n",content:"Next up we need to activate it\nLogin to your dashboard at atsign.com/dashboard\nOpen “my atSigns”\nOpen “managed” of atSign you are registering”\nNavigate to Advance settings:\nIf you have already activated your atSign you will be prompted to erase all your data first\nOnce done you are able to link your atSign with your private dess. Use your domain and port number with which you have created service on your cloud instance and press Activate.\nYou should see that your atSign is being activated in your dashboard:\nThis can take several minutes so go get cup of coffee, some tea maybe, stretch your body and pray you haven’t made any mistakes!\nOnce the activation process completes you are welcomed by green Activated.\nYou can now open @buzz or @wavi and register your atSign via QR code and generate your keys!\nCONGRATULATIONS\n"}).add({id:41,href:"/docs/tutorials/dess/gcp/7_activation/",title:"Activation of atSign",description:"Documentation\n",content:"Next up we need to activate it\nLogin to your dashboard at https://my.atsign.com/dashboard\nOpen “my atSigns”\n\r\r\rOpen “managed” of atSign you are registering”\n\r\r\rNavigate to Advance settings:\n\r\r\rIf you have already activated your atSign you will be prompted to erase all your data first\n\r\r\rOnce done you are able to link your atSign with your private dess. Use your domain and port number with which you have created service on your cloud instance and press Activate\n\r\r\rYou should see that your atSign is being activated in your dashboard:\n\r\r\rThe activation will be completed once you have used your QR code from dess and retrieved your keys.\nOnce the activation process completes you are welcomed by green Activated.\n\r\r\rCONGRATULATIONS\n"}).add({id:42,href:"/docs/tutorials/dess/rpi/7-activation/",title:"Activation of atSign",description:"Documentation\n",content:"Next up we need to activate it\nLogin to your dashboard at atsign.com/dashboard\nOpen “my atSigns”\nOpen “managed” of atSign you are registering”\nNavigate to Advance settings:\nIf you have already activated your atSign you will be prompted to erase all your data first\nOnce done you are able to link your atSign with your private dess. Use your domain and port number with which you have created service on your cloud instance and press Activate.\nYou should see that your atSign is being activated in your dashboard:\nThis can take several minutes so go get cup of coffee, some tea maybe, stretch your body and pray you haven’t made any mistakes!\nOnce the activation process completes you are welcomed by green Activated.\nYou can now open @buzz or atmospherePro and register your atSign via QR code and generate your keys!\nCONGRATULATIONS\n"}).add({id:43,href:"/docs/sdk/flutter/services_and_managers/at_client_manager/",title:"AtClientManager",description:"Documentation\n",content:"Overview #\rThe AtClientManager is in charge of overseeing and managing all client services.It makes NotificationService, SyncService, and Client application preferences easier to access from its instance.It is also used for client method calls.\nBased on your need you can either install at_client_mobile or at_client and import. After that you will be able to make an AtClientManager Instance. Now to Initialize the AtClient instance , the setCurrentAtsign method needs to be called.\nAtClientManager.getInstance().setCurrentAtSign(\u0026#39;@alice\u0026#39;, \u0026#39;wavi\u0026#39;, \u0026lt;preference\u0026gt;); The setCurrentAtSign method accepts the following arguments: currentAtSign, namespace and the preferences. The currentAtsign argument accepts an atSign , namespace accepts the namespace of the app and the preference accepts AtClientPreference value which we are going to discuss next.\nAfter Initializing you are ready to make calls of client methods and services. The AtClientManger Instance has a getter atClient which returns an instance of AtClient.\nUsage #\rTo access CRUD methods,\nAtClient atClient = atClientManager.atClient; To access NotificationService methods\nNotificationService notificationService = atClientManager.notificationService; And for the SyncService which is responsible for invoking the sync :\nSyncService syncService = atClientManager.syncService; "}).add({id:44,href:"/docs/sdk/flutter/services_and_managers/at_client_preference/",title:"AtClientPreference",description:"Documentation\n",content:"Overview #\rAtClientPreference is used to configure the preferences of an atPlatform application. It offers a variety of attributes to give a developer ultimate flexibility.\n   Attributes Description     hiveStoragePath Local device path of hive storage   commitLogPath Local device path of commit log   isLocalStoreRequired Specify whether local store is required   cramSecret Shared secret of the atSign   keyStoreSecret Secret key to encrypt keystore data   privateKey Private key of the atSign   namespace Specifies the namespace of an app.   rootDomain Domain of the root server. Defaults to root.atsign.com   rootPort Port of the root server. Defaults to 64   syncIntervalMins Frequency of sync tasks to run in minutes. Defaults to 10 minutes.   outboundConnectionTimeout Idle time in milliseconds of connection to secondary server. Default to 10 minutes.   maxDataSize Maximum data size a secondary can store. Temporary solution. Have to fetch this from the server using stats verb.   downloadPath Default path to download stream files   syncRegex regex to perform sync   syncBatchSize Number of keys to batch for sync to secondary server   syncPageLimit The number of keys to pull from cloud secondary to local secondary in a single call.    For Local device paths we recommend the path_provider package.\nUsage #\rFuture\u0026lt;AtClientPreference\u0026gt; loadAtClientPreference() async { var dir = await getApplicationSupportDirectory(); return AtClientPreference() ..rootDomain = \u0026#39;root.atsign.org\u0026#39; ..namespace = \u0026#39;sdkExample\u0026#39; ..hiveStoragePath = dir.path ..commitLogPath = dir.path ..isLocalStoreRequired = true // TODO set the rest of your AtClientPreference here ; } "}).add({id:45,href:"/docs/contribute/shortcodes/button/",title:"Buttons",description:"Button shortcodes used in atsign.dev",content:"\nbutton/link #\rA button that links to another page.\n   Attribute Description     href The html href to the content when the button is clicked.   type The button style (Any bootstrap style, defaults to \u0026lsquo;primary\u0026rsquo;)   text The label for the button.    Note: Only primary and secondary types are fully supported.\nExample #\rSecondary   Primary  \n{{\u0026lt;button/linkhref=\u0026#34;#\u0026#34;type=\u0026#34;secondary\u0026#34;text=\u0026#34;Secondary\u0026#34;\u0026gt;}} {{\u0026lt;button/linkhref=\u0026#34;#\u0026#34;type=\u0026#34;primary\u0026#34;text=\u0026#34;Primary\u0026#34;\u0026gt;}} "}).add({id:46,href:"/docs/contribute/shortcodes/card/",title:"Cards",description:"Card shortcodes used in atsign.dev",content:"\ncard/breadcrumb #\rA breadcrumb style card that links to another page.\n   Attribute Description     href The html href to the content when the card is clicked.   first The first text element in the breadcrumb   second The second text element in the breadcrumb   third The third text element in the breadcrumb    Example #\rFirst \u0026rarr;    First \u0026rarr; Second \u0026rarr;    First \u0026rarr; Second \u0026rarr; Third \u0026rarr;   {{\u0026lt;card/breadcrumbhref=\u0026#34;#\u0026#34;first=\u0026#34;First\u0026#34;\u0026gt;}} {{\u0026lt;card/breadcrumbhref=\u0026#34;#\u0026#34;first=\u0026#34;First\u0026#34;second=\u0026#34;Second\u0026#34;\u0026gt;}} {{\u0026lt;card/breadcrumbhref=\u0026#34;#\u0026#34;first=\u0026#34;First\u0026#34;second=\u0026#34;Second\u0026#34;third=\u0026#34;Third\u0026#34;\u0026gt;}} card/feature #\rA feature style card that links to another page.\n   Attribute Description     href The html href to the content when the card is clicked.   class Additional css classes to apply to the card.   title The title for the card   text The text in the body of the card    See bootstrap cards for more information.\nExample #\rMy Card My text goes here...\n   {{\u0026lt;card/featureclass=\u0026#34;w-50\u0026#34;href=\u0026#34;#\u0026#34;title=\u0026#34;My Card\u0026#34;text=\u0026#34;My text goes here...\u0026#34;\u0026gt;}} card/group #\rA wrapper for cards using bootstrap\u0026rsquo;s deck style.\nNo attributes for this shortcode.\nExample #\rFeature Card 1 This is the first card to show the deck example.\n   Feature Card 2 This is the second card to show the deck example.\n    {{\u0026lt;card/group\u0026gt;}} {{\u0026lt;card/featureclass=\u0026#34;w-25 min-w-250\u0026#34;href=\u0026#34;/docs/contribute/shortcodes/card\u0026#34;title=\u0026#34;Feature Card 1\u0026#34;text=\u0026#34;This is the first card to show the deck example.\u0026#34;\u0026gt;}} {{\u0026lt;card/featureclass=\u0026#34;w-25 min-w-250\u0026#34;href=\u0026#34;/docs/contribute/shortcodes/card\u0026#34;title=\u0026#34;Feature Card 2\u0026#34;text=\u0026#34;This is the second card to show the deck example.\u0026#34;\u0026gt;}} {{\u0026lt;/card/group\u0026gt;}} card/grid #\rA css-grid based wrapper for cards best used for an even number of cards.\n   Attribute Description     class Additional css classes to apply to the wrapper.    Feature Card 1 This is the first card to show the deck example.\n   Feature Card 2 This is the second card to show the deck example.\n    Example #\r{{\u0026lt;card/gridclass=\u0026#34;grid-col-4 grid-col-md-2 grid-col-sm-1\u0026#34;\u0026gt;}} {{\u0026lt;card/featureclass=\u0026#34;w-25 min-w-250\u0026#34;href=\u0026#34;/docs/contribute/shortcodes/card\u0026#34;title=\u0026#34;Feature Card 1\u0026#34;text=\u0026#34;This is the first card to show the deck example.\u0026#34;\u0026gt;}} {{\u0026lt;card/featureclass=\u0026#34;w-25 min-w-250\u0026#34;href=\u0026#34;/docs/contribute/shortcodes/card\u0026#34;title=\u0026#34;Feature Card 2\u0026#34;text=\u0026#34;This is the second card to show the deck example.\u0026#34;\u0026gt;}} {{\u0026lt;/card/grid\u0026gt;}} card/flex #\rA css flexbox based wrapper to automatically layout cards.\n   Attribute Description     class Additional css classes to apply to the wrapper.    Feature Card 1 This is the first card to show the deck example.\n   Feature Card 2 This is the second card to show the deck example.\n    card/social #\rA card for linking to a social platform.\n   Attribute Description     class Additional css classes to apply to the bootstrap card element.   title The title for the card.   img-src The src for the img element.   img-class Additional css classes to apply to the img tag.   img-type The type of image, can be one of \u0026lsquo;page\u0026rsquo;, \u0026lsquo;asset\u0026rsquo;, or \u0026lsquo;remote\u0026rsquo; (default)   bg-class Additional css classes to apply to the img container    Example #\r Wavi Start contributing, this is where the code hits the fan.   {{\u0026lt;card/socialhref=\u0026#34;https://github.com/\u0026#34;class=\u0026#34;w-25 min-w-250\u0026#34;title=\u0026#34;Wavi\u0026#34;img-src=\u0026#34;https://wavi.ng/assets/img/wavimetalogo.jpeg\u0026#34;img-class=\u0026#34;bg-white p-5\u0026#34;\u0026gt;}} Start contributing, this is where the code hits the fan. {{\u0026lt;/card/social\u0026gt;}} card/showcase #\rA card for showcasing a single item.\n   Attribute Description     class Additional css classes to apply to the bootstrap card element.   title The title for the card.   img-src The src for the img element.   img-class Additional css classes to apply to the img tag.   img-type The type of image, can be one of \u0026lsquo;page\u0026rsquo;, \u0026lsquo;asset\u0026rsquo;, or \u0026lsquo;remote\u0026rsquo; (default)   bg-class Additional css classes to apply to the img container    Example #\r Wavi Your space on the privacy-first web.\nLearn more  Wavi.ng    {{\u0026lt;card/showcaseclass=\u0026#34;w-50\u0026#34;title=\u0026#34;Wavi\u0026#34;img-src=\u0026#34;https://wavi.ng/assets/img/wavimetalogo.jpeg\u0026#34;img-class=\u0026#34;bg-white p-5\u0026#34;\u0026gt;}} {{\u0026lt;card/showcase-item\u0026gt;}}Your space on the privacy-first web.{{\u0026lt;/card/showcase-item\u0026gt;}} {{\u0026lt;card/showcase-linkhref=\u0026#34;https://atsign.com/apps/wavi\u0026#34;\u0026gt;}}Learn more{{\u0026lt;/card/showcase-link\u0026gt;}} {{\u0026lt;card/showcase-linkhref=\u0026#34;https://wavi.ng/@wavi\u0026#34;\u0026gt;}}Wavi.ng{{\u0026lt;/card/showcase-link\u0026gt;}} {{\u0026lt;/card/showcase\u0026gt;}} "}).add({id:47,href:"/docs/tutorials/dess/rpi/5-rasp-connection/",title:"Connection to Raspberry Pi",description:"Documentation\n",content:"Now we will connect to our Raspberry Pi (which should be connected via ethernet or wireless to our network). We will be using Putty, although there are other options such as OpenSSH. To begin with, let\u0026rsquo;s download the software.\nWe will choose SSH (port 22) and our Raspberry Pi local IP address: If you are using a public-key (if not, this step is not necessary), you will have to choose the directory where it is located, in SSH-\u0026gt;Auth options: After that, click \u0026lsquo;Open\u0026rsquo; button, located in the main menu. The connection will start. Now we are ready to start configuring our private dess.\n"}).add({id:48,href:"/docs/tutorials/at-dude/6_controller/",title:"Controller",description:"Documentation\n",content:"   TOC     Dude Model   From Json   To Json   Other Methods   Profile Model    In this codelab we will discuss the controller class of the dude app and how it interacts with the DudeService() class.\nDude Controller #\rThe DudeController() class controls the state management for the app.\n/// A Dude class that controls the UI update when the [DudeService] methods are called. class DudeController with ChangeNotifier { List\u0026lt;DudeModel\u0026gt; _dudes = []; List\u0026lt;DudeModel\u0026gt; get dudes { _dudes.sort((a, b) =\u0026gt; b.timeSent.compareTo(a.timeSent)); return _dudes; } /// Get dudes sent to the current astign.  Future\u0026lt;void\u0026gt; getDudes() async { _dudes = await DudeService.getInstance().getDudes(); notifyListeners(); } List\u0026lt;AtContact\u0026gt; _contacts = []; List\u0026lt;AtContact\u0026gt; get contacts { return [..._contacts]; } int get dudeCount =\u0026gt; dudes.length; /// Get contacts for the current atsign.  Future\u0026lt;void\u0026gt; getContacts() async {...} /// Deletes dudes sent to the current atsign.  ///  void deleteDude(DudeModel dude) async {...} } We extend this class with a ChangeNotifier() because the app uses the Provider package as state management.\nLines 5 to 8 returns a List of DudeModel sorted from oldest to newest dudes. Lines 18 to 20 returns a List of AtContact. The AtContacts class contains properties about the contacts of an atsign like the contacts atsign.\n/// Get dudes sent to the current astign.  Future\u0026lt;void\u0026gt; getDudes() async { _dudes = await DudeService.getInstance().getDudes(); notifyListeners(); } This method calls DudeService.getDudes() method followed by notify listeners so all widgets that depends on the DudeModel() will be rebuilt. ie dudes will be added to the screen.\n/// Get contacts for the current atsign.  Future\u0026lt;void\u0026gt; getContacts() async { _contacts = await DudeService.getInstance().getContactList() ?? []; notifyListeners(); } This method calls DudeService.getContactList() method followed by notify listeners so all widgets that depends on the DudeModel() will be rebuilt. ie contacts will be added or removed from the screen. If the list of contacts is null an empty list is returned instead.\n/// Deletes dudes sent to the current atsign.  ///  void deleteDude(DudeModel dude) async { bool result = await DudeService.getInstance().deleteDude(dude); result ? _dudes = await DudeService.getInstance().getDudes() : null; notifyListeners(); } This method calls DudeService.deleteDude() method followed by notify listeners so all widgets that depends on the DudeModel() will be rebuilt. i.e the deleted dude will be removed from the screen.\n"}).add({id:49,href:"/docs/tutorials/at-dude/5_dude_service/",title:"Dude Service",description:"Documentation\n",content:"   TOC    | Dude Service | | Dude Service Imports | | Dude Service Properties | | Local Notification | | Local Notification imports | | Properties of LocalNotificationService |\nThey are three service classes in the dude app, they are NavigationServices(), DudeServices() and LocalNotificationServices(). In this code lab we will explore the properties of these classes.\nDudeService #\rThis class is a singleton that makes all the network calls to the atPlatform.\nImports #\rimport \u0026#39;dart:async\u0026#39;; import \u0026#39;dart:convert\u0026#39;; import \u0026#39;dart:typed_data\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:at_app_flutter/at_app_flutter.dart\u0026#39;; import \u0026#39;package:at_client/src/service/notification_service.dart\u0026#39;; import \u0026#39;package:at_client_mobile/at_client_mobile.dart\u0026#39;; import \u0026#39;package:at_commons/at_commons.dart\u0026#39;; import \u0026#39;package:at_contact/at_contact.dart\u0026#39;; import \u0026#39;package:at_contacts_flutter/services/contact_service.dart\u0026#39;; import \u0026#39;package:at_utils/at_utils.dart\u0026#39;; import \u0026#39;../models/dude_model.dart\u0026#39;; import \u0026#39;../models/profile_model.dart\u0026#39;; import \u0026#39;local_notification_service.dart\u0026#39;; All the packages that starts with at_ are packages that allows us to interact with the atPlatform.\n at_app_flutter A library that help developers build flutter applications on the atPlatform. at_client The at_client library is the non-platform specific Client SDK which provides the essential methods for building an app using the atProtocol. at_client_mobile A Flutter extension to the at_client library which adds support for mobile, desktop and IoT devices. at_commons A library of Dart and Flutter utility classes that are used across other components of the @‎platform. at_contacts: A Dart library for managing contact data that developers can use for their applications. at_contacts_flutter A Flutter plugin project to provide ease of managing contacts for an @‎sign using @‎platform. at_utils A Dart library that contains various utility classes such as atSign, atmetadata, configuration, and logger.  We discussed the dude and profile model in the previous codelab.\nProperties of DudeService #\rclass DudeService { static final DudeService _singleton = DudeService._internal(); DudeService._internal(); factory DudeService.getInstance() { return _singleton; } final AtSignLogger _logger = AtSignLogger(AtEnv.appNamespace); AtClient? atClient; AtClientService? atClientService; var atClientManager = AtClientManager.getInstance(); static var contactService = ContactService(); Future\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async {...} /// Receives all dudes sent to the current atsign.  Future\u0026lt;List\u0026lt;DudeModel\u0026gt;\u0026gt; getDudes() async {...} /// Subscribes to the stream of data being sent to the current atsign.  void monitorNotifications(BuildContext context) {...} /// Fetch the current atsign contacts.  Future\u0026lt;List\u0026lt;AtContact\u0026gt;?\u0026gt; getContactList() {...} /// Fetch the current atsign profile image  Future\u0026lt;Uint8List?\u0026gt; getCurrentAtsignProfileImage() async {...} /// Fetch details for the current atsign  Future\u0026lt;dynamic\u0026gt; getCurrentAtsignContactDetails() async {...} /// Get the profile stats for the current atsign  Future\u0026lt;ProfileModel\u0026gt; getProfile() async {...} /// Save senders atsign to the current atsign local secondary.  Future\u0026lt;void\u0026gt; putSenderAtsign( {required String senderAtsign, required String receiverAtsign}) async {...} /// Get sender atsign saved in the current atsign remote secondary.  Future\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; getSenderAtsigns() async {...} /// Delete dude sent to the current atsign.  Future\u0026lt;bool\u0026gt; deleteDude(DudeModel dude) async {...} } } Line 2 - 6 creates a singleton pattern. Every time DudeService.getInstance() is called it will always return the same object. You can read more about it in on stackoverflow.\nThe AtSignLogger in line 9 is used to generate server logs. It also helps to classify logs into subclasses live severe, info and warning based on importance.\nLines 11 to 14 creates instances of AtClient(), AtClientService(), AtClientManager() and ContactService().\n AtClient AtClient should be used to perform Create, Read, Update or Delete (CRUD) operations on the secondary server. AtClientService Class that manages your atsigns. AtClientManager Factory class responsible for giving the instances of AtClient and other services for a given atSign.  DudeService Methods #\rWe\u0026rsquo;ll now discuss the network calls that are made to the atPlatform to perform various CRUD operation.\nputDude Method #\rThis method saves the DudeModel and ProfileModel on the atPlatform.\n/// Saves Dude to the receiver\u0026#39;s remote secondary and stats to the sender\u0026#39;s local secondary.  Future\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { bool isCompleted = false; dude.saveSender(atClient!.getCurrentAtSign()!); dude.saveReceiver(contactAtsign); dude.saveId(); ... } Line 4 instantiates isCompleted to false. This is to display a CircularProgressIndicator on the UI while this method is being executed.\nLine 5 saves the currentAtsign or signed in user to the DudeModel.receiver property.\nLine 6 saves the contactAtsign to the DudeModel.receiver property. The contactAtsign is the atsign that was selected as the receiver in the UI.\nline 7 generates a UUID and saves it to the DudeModel.id property.\nMetadata \u0026amp; AtKeys #\rFuture\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { ... var metaData = Metadata() ..isEncrypted = true ..namespaceAware = true ..ttr = -1 ..isPublic = false; var key = AtKey() ..key = dude.id ..sharedBy = dude.sender ..sharedWith = dude.receiver ..metadata = metaData ..namespace = \u0026#39;\u0026#39;; dude.saveTimeSent(); ... } Lines 4 to 8 creates the MetaData. This class describes the characteristics of the AtKey being saved on the atPlatform. eg. The AtKey will not be available to everyone on the atPlatform because isPublic is set to false. The list of Metadata properties can be viewed here.\nLines 10 to 15 creates the AtKey. This class acts as an unique identifier of the data being saved to the atPlatform. If the atPlatform was a table the @key would represent the row.\nIt is important to remember that the atsign that creates the data owns the data. Therefore, the sharedWith property controls who the data is being shared with and the shareBy property determine who the owner of the data is. This is not true in every case, I\u0026rsquo;ll explain the exception next.\nLine 17 saves the current time to the DudeModel.timeSent property.\nNotify #\rThey are two ways to save data on the atPlatform. It can be saved on the sender secondary server or the receiver secondary server, We\u0026rsquo;ll discuss the latter\nFuture\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { ... await atClientManager.notificationService.notify( NotificationParams.forUpdate( key, value: json.encode(dude.toJson()), ), onSuccess: (notification) async {}); ... } Lines 4 to 9 saves the the method we use to save data on the receiver secondary server. The reason we want to save the dude on the receiver server is because we want the receiver to have the permission to delete the dude after listening to it.\nThe NotificationParams.forUpdate() method accepts an Atkey and a value arguments. We pass the AtKey we created previously in line 6 and in line 7 we pass in a string as the value.\njson.encode(dude.toJson()) converts the DudeModel to a string.\nSaving Profile Model data #\rFuture\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { ... var profileMetaData = Metadata() ..isEncrypted = true ..namespaceAware = true ..isPublic = false; var profileKey = AtKey() ..key = \u0026#39;dude_profile_\u0026#39; + dude.sender.replaceFirst(\u0026#39;@\u0026#39;, \u0026#39;\u0026#39;) ..sharedBy = dude.sender ..metadata = profileMetaData; ... Lines 5 to 8 creates the Profile Metadata and lines 10 to 13 creates the Profile AtKey. No sharedWith property was provided because the data will not be shared with any other atsign.\nFuture\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { ... try { AtValue profileAtValue = await atClient!.get(profileKey); ProfileModel profileModel = ProfileModel.fromJson(jsonDecode(profileAtValue.value)); profileModel.saveId(dude.sender); profileModel.dudesSent += 1; profileModel.dudeHours += dude.duration; if (dude.duration \u0026gt; profileModel.longestDude) { profileModel.saveLongestDude(dude.duration); } await atClient! .put( profileKey, json.encode( profileModel.toJson(), ), ) .whenComplete(() =\u0026gt; isCompleted = true) .onError((error, stackTrace) =\u0026gt; isCompleted = false); } ... ) Lines 5 to 7 retrieves the ProfileModel data from the remote secondary. We will discuss the AtClient!.get() method later in this code lab.\nLines 9 to 10 updated the ProfileModel by incrementing the previous values.\nLines 11 to 12 compare the current dude.duration with the previous profileModel.longestDude and saves the current dude.duration if it is the longest duration of the two.\nLines 14 to 22 saves the profileModel to remote secondary.\nThe code was placed in a try block because it will throw an exception if there is no ProfileModel in remote secondary.\nFuture\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { ... } catch (e) { // Exception should be thrown the first time a profile is created for an atsign  await atClient! .put( profileKey, json.encode( ProfileModel( id: dude.sender, dudesSent: 1, dudeHours: dude.duration, longestDude: dude.duration) .toJson(), ), ) .whenComplete(() =\u0026gt; isCompleted = true) .onError((error, stackTrace) =\u0026gt; isCompleted = false); } return isCompleted; } Lines 8 to 20 saves the profileModel to the remote secondary. This code only execute the first time a profileModel is created for an atSign.\nGetting Dudes from remote secondary #\r/// Receives all dudes sent to the current atsign.  Future\u0026lt;List\u0026lt;DudeModel\u0026gt;\u0026gt; getDudes() async { List\u0026lt;AtKey\u0026gt; receivedKeysList = []; var key = await atClient!.getAtKeys( regex: \u0026#39;^cached:.*@.+\\$\u0026#39;, // sharedBy: atsign,  ); receivedKeysList.addAll(key); ... } // @blizzard30:some_uuid.at_skeleton_app@assault30 // @blizzard30:signing_privatekey@blizzard30  This method retrieves the DudeModel thats stored on remote secondary.\nLines 3 instantiates an empty list that will eventually store AtKeys.\nLines 4 to 7 grabs all the AtKey stored in the current atSign remote secondary.\nLine 9 add the keys to the receivedKeysList.\n/// Receives all dudes sent to the current atsign.  Future\u0026lt;List\u0026lt;DudeModel\u0026gt;\u0026gt; getDudes() async { ... List\u0026lt;DudeModel\u0026gt; dudes = []; for (AtKey key in receivedKeysList) { try { if (key.sharedBy != null \u0026amp;\u0026amp; key.key!.length == 36) { AtValue _keyValue = await atClient!.get(AtKey()..key = key.key!); dudes.add(DudeModel.fromJson(jsonDecode(_keyValue.value))); } } on Exception catch (e) { ScaffoldMessenger(child: SnackBar(content: Text(e.toString()))); } } return dudes; } Line 4 instantiates an empty list that will eventually store the DudeModel extracted from remote secondary.\nLines 5 to 15 loops through every AtKey in the receivedKeysList.\nline 7 filters the receivedKeysList to only select AtKey that was shared and where the key/id is a UUID.\nline 8 extract the AtValue of the AtKey\nline 10 converts the value of the AtValue to a DudeModel and add it to the empty dudes list.\nline 13 shows a SnackBar with the exception message if an error occurs.\nLine 16 returns the List of DudeModel.\nMonitor Notification #\rThe atPlatform has its own Notification Service that monitors being sent to the current atSign.\nvoid monitorNotifications(BuildContext context) { atClientManager.notificationService .subscribe(regex: \u0026#39;at_skeleton_app\u0026#39;) .listen( (AtNotification notification) async { String? currentAtsign = DudeService.getInstance().atClient!.getCurrentAtSign(); if (currentAtsign == notification.to) { await LocalNotificationService().showNotifications( notification.id.length, \u0026#39;Dude\u0026#39;, \u0026#39;${notification.from}sent you a dude\u0026#39;, 1); } }, ); } Line 3 subscribe to data being sent over the dude app.\nIn line the listen method expects an option function. This function receives an AtNotification that allows us to control what data we want to listen for as show in lines 5 to 16.\nIn line 6 to 7 we get the current atsign. In line 9 we filter the notification to ensure the notification is being sent to the current atsign.\nIn lines 10 to 14 we show the user a notification that a dude was sent to them by the atSign of the sender.\nGet Contacts #\r/// Fetch the current atsign contacts.  Future\u0026lt;List\u0026lt;AtContact\u0026gt;?\u0026gt; getContactList() { return contactService.fetchContacts(); } Line 3 returns a list of AtContacts. An AtContact is a class containing properties of other atsigns that was selected as a contact.\nGet Profile #\rThis method retrieves the ProfileModel of the current atsign.\n/// Get the profile stats for the current atsign  Future\u0026lt;ProfileModel\u0026gt; getProfile() async { return await atClient! .getAtKeys( regex: \u0026#39;dude_profile_\u0026#39;, sharedBy: atClient!.getCurrentAtSign(), ) .then( (value) =\u0026gt; atClient!.get(value[0]).then( (value) =\u0026gt; ProfileModel.fromJson( jsonDecode(value.value), ), ), ); } Lines 3 to 7 gets a list profile models AtKeys, there only one AtKey in the list. Line 9 returns the AtValue and lines 10 to 11 returns the ProfileModel class.\nDelete Dude #\rThis dude deletes a dude from remote secondary.\n/// Delete dude sent to the current atsign.  Future\u0026lt;bool\u0026gt; deleteDude(DudeModel dude) async { try { List\u0026lt;AtKey\u0026gt; dudeAtKey = await atClient!.getAtKeys(regex: dude.id); bool isDeleted = await atClient!.delete(dudeAtKey[0]); return isDeleted; } on AtClientException catch (atClientExcep) { _logger.severe(\u0026#39;❌ AtClientException : ${atClientExcep.errorMessage}\u0026#39;); return false; } catch (e) { _logger.severe(\u0026#39;❌ Exception : ${e.toString()}\u0026#39;); return false; } } Line 4 returns a list containing a dude AtKey that corresponds with the uuid of the DudeModel. Line 5 deletes it.\nLines 8 to 13 logs the exception if an error occurs.\n"}).add({id:50,href:"/docs/tutorials/at-dude/9_history_screen/",title:"History Screen",description:"Documentation\n",content:""}).add({id:51,href:"/docs/contribute/shortcodes/image/",title:"Images",description:"Image shortcodes used in atsign.dev",content:"\nInclude an image using the 3 different types:\n remote (default) page asset     Attribute Description     class Additional css classes to apply to the img element.   src The src for the image (url or path).   type The type of image (remote, page or global).    image - remote #\rUsed when you would like to use an image from another site (with permission of course!).\nYou do not need to specify a type for this since it is default.\nSet src to the url of the image.\nExample #\r{{\u0026lt;imageclass=\u0026#34;bg-white\u0026#34;src=\u0026#34;https://atsign.com/wp-content/uploads/2020/09/The@Company-Logo@2x.png.webp\u0026#34;\u0026gt;}} image - page #\rUsed when an image belongs to this site, and only needs to be visible from a single page.\nSet the type to \u0026ldquo;page\u0026rdquo; for this.\nSet the src to the filename for your image.\nIf your page is not named \u0026ldquo;index.md\u0026rdquo; or \u0026ldquo;_index.md\u0026rdquo;:\n Create a folder with the same name as your page (without the \u0026ldquo;.md\u0026rdquo;). Place your file in this folder and rename it to index.md Place your image in the folder, and you should be good to go!.  Your folder structure should look like this after:\n- my_page (folder) \\ - index.md \\ - my_image.png Example #\r{{\u0026lt;imageclass=\u0026#34;bg-white\u0026#34;src=\u0026#34;my_image.png\u0026#34;type=\u0026#34;page\u0026#34;\u0026gt;}} image - asset #\rUsed when an image belongs to this site, and needs to be visible from multiple pages.\nSet the type to \u0026ldquo;asset\u0026rdquo; for this.\nSet the src to the filepath for your image from within the assets folder.\nExample #\r{{\u0026lt;imageclass=\u0026#34;bg-white\u0026#34;src=\u0026#34;img/contributing/my_global_image.png\u0026#34;type=\u0026#34;asset\u0026#34;\u0026gt;}} "}).add({id:52,href:"/docs/tutorials/dess/aws/5-setup-and-deployment/",title:"Instance setup and dess deployment",description:"Documentation\n",content:"Open your LightSail console\nBy now you should see your instance in “Running state”\nOpen it and on tab Connect click on “Connect using SSH”\nYou should be presented by a new window with command line:\nBefore we do anything else, we should update the system:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade This might take some time, but it will make sure we have latest repository information and the system is up to date.\nNext make sure curl is installed, we will use curl to pull the dess installation file:\nsudo apt install curl\nFinally, run the dess installer:\ncurl -fsSL https://getdess.atsign.com | sudo bash\nOnce the installer is finished you should be prompted like so:\nDess installed, please move on to the sudo dess-create command.\n"}).add({id:53,href:"/docs/tutorials/dess/gcp/5_setup_and_deployment/",title:"Instance setup and dess deployment",description:"Documentation\n",content:"Open your GCP console at https://console.cloud.google.com/compute/instances and search for VM instances\n\rBy now you should see your instance in “Running state”\n\r\r\rClick on the SSH button and connect to your instance.\nYou should be presented by new window with command line:\n\r\r\rBefore we do anything else, we should update the system:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade\nThis might take some time, but it will make sure we have latest repository information and the system is up to date.\nNext make sure curl is installed, we will use curl to pull the dess installation file:\nsudo apt install curl Finally, run the dess installer:\ncurl -fsSL https://getdess.atsign.com | sudo bash\nOnce the installer is finished you should be prompted like so:\nDess installed, please move on to the sudo dess-create command.\n"}).add({id:54,href:"/docs/sdk/flutter/services_and_managers/introduction/",title:"Introduction",description:"Documentation\n",content:""}).add({id:55,href:"/docs/tutorials/at-dude/1_introduction/",title:"Introduction",description:"Documentation\n",content:"In this tutorial we will cover the main aspect of the at_dude app. This app is a secure, end-to-end encrypted, peer-to-peer application that allows you to send \u0026lsquo;dudes\u0026rsquo; to your contacts!\nThe longer you press and hold the Dude button, the longer your sent dude will be! you can Keep up-to-date with your \u0026lsquo;dude\u0026rsquo; stats to see how much duding you\u0026rsquo;ve done!.\nThis app is build on the atPlatform. The atPlatform is an open source backend platform that allows developers to build end to end encrypted application.\nThe purpose of this tutorial guide you through the steps in creating a production app on the atPlatform.\nApp Structure #\rThe at_dude app contains five folders: controller, models, screens, services and widgets. We will discuss these folders in details in subsequent codelabs.\n"}).add({id:56,href:"/docs/tutorials/dess/aws/1-introduction/",title:"Introduction",description:"Documentation\n",content:"In this step-by-step guide I will walk you through all steps required to setup your own private dess using AWS. Please use the index to skip some steps in case you have already completed them.\n"}).add({id:57,href:"/docs/tutorials/dess/gcp/1_introduction/",title:"Introduction",description:"Documentation\n",content:"dess stands for “Distributed Edge Secondary Server” and it is used to host your atSigns on your own secondary server. Refer to the Setup dess guide under Options to learn more.\nIn this step-by-step guide we will walk you through all steps required to setup your own private dess in GCP cloud from scratch. Please use index to skip some steps in case you have done them in another way.\n"}).add({id:58,href:"/docs/tutorials/dess/rpi/1-introduction/",title:"Introduction",description:"Documentation\n",content:"In this step-by-step guide I will walk you through all steps required to setup your own private dess using a Raspberry Pi.\n"}).add({id:59,href:"/docs/sdk/flutter/services_and_managers/key_basics/",title:"Key Basics",description:"Documentation\n",content:"Overview #\rTo store data, atPlatform utilizes a straightforward key-value method. A key serves as a unique identifier in key-value pairs.\nAtKey Structure:\n   Attributes Description Return Type     key Unique Identifier for the data String   sharedWith The atSign to share with String   sharedBy The atSign that is sharing String   namespace The namespace of the app String   metadata  Metadata   isRef  Bool    Metadata #\rMetadata In AtKey allows you to add more aspects of AtKey. If you want your data to live for a given period of time, or if you want it to be born/deleted after a set amount of time, metaData can help you with that.\nMetadata Structure:\n   Attributes Capabilities Return Type     ttl  int   ttb  int   ttr  int   ccd  bool   availableAt  DateTime   expiresAt  DateTime   refreshAt  DateTime   createdAt  DateTime   updatedAt  DateTime   dataSignature  String   sharedKeyStatus  bool   isPublic  bool   isHidden  bool   namespaceAware  bool   isBinary  bool   isEncrypted  bool   isCached  bool    Key Creation rules\nA key in atProtocol has the structure described below.\n\u0026lt;Key Visibility\u0026gt;|\u0026lt;sharedWith\u0026gt;:\u0026lt;entity\u0026gt;.\u0026lt;namespace\u0026gt;@\u0026lt;sharedBy/owner\u0026gt;\nA key in atProtocol should adhere to following rules:\n Length of a key should not be more than 240 characters (Limited by the current impl of the secondary. Not a protocol limitation) Max of fifty five 7-bit characters for the atSign Allowed characters in an entity are: [\\w._,-’”]  Namespace is mandatory in the current implementation of the protocol If cached then the owner of the key should not be same as current atSign sharedWith and sharedBy/owner cannot be same for a shared key sharedWith and sharedBy/owner should be same for a self key (Private, Hidden (_), Just self) Reserved keys in protocol, private keys and hidden keys cannot be notified Ex: notify:_secret@jagan:sitaram 9.Protocol prevents creation of a key with a owner/sharedBy using an atSign that’s not owned by the current user. Key cannot be a reserved key.  List of reserved keys:\n privatekey:at_pkam_privatekey privatekey:at_pkam_publickey public:publickey privatekey:privatekey shared_key privatekey:self_encryption_key signing_privatekey public:signing_publickey privatekey:at_secret privatekey:at_secret_deleted  atProtocol data visibility\nThe atProtocol saves data created in a key-value pair format. atProtocol lets you create data with three levels of visibility. They are public, shared and self data. In the atProtocol a piece of data is identified as a certain data type based on the key structure. In the SDK, AtKey exposes abstractions to create keys for the various data types. Below sections describe this in detail.\nPublic data\nPublic data can be looked up without authentication. I.e. if @bob wants to lookup public data in the secondary server of @alice, @bob does not need to prove to @alice that he is @bob to see the data publicly shared by @alice. Public view of the @alice’s data will be the same for any user on the atPlatform. I.e. if @jane and @john look up some public data from @alice, it will be exactly the same as what @bob sees.\nGood examples of public data in the real world are “first name” and the “last name”. We often don’t mind sharing our name with people, even random strangers.\nSigning of public data Public data is signed with the “private keys” of the user. Which means when @alice looks up @bob’s public data, @alice knows for sure that the data is indeed from @bob.\nCreating a public key in atProtocol\nvar publicKey = AtKey.public(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build(); Persisting public data in atProtocol\nfinal atClientManager = await AtClientManager.getInstance() .setCurrentAtSign(‘@alice, \u0026#39;me\u0026#39;, AtClientPreference()); var atClient = atClientManager.atClient; var phoneKey = AtKey.public(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build();; var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Shared data\nShared data does exactly what it says it does! It is created in order to share it with other people. These are the people we typically know and trust. When @bob shares his phone number with @alice, then only @alice can see that piece of data. Good examples of shared data in the real world are “phone number” and “email”. We only share these details with the people we know and trust.\nEncryption of shared data\nWhen @bob shares data to @alice, @bob generates a shared key for @alice and encrypts the data with the shared key. Further, the shared key is encrypted with the @alice public key. So the data shared is cryptographically secure.\nCreating a shared key in atProtocol\nvar sharedKey = AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;@bob\u0026#39;).build(); Persisting shared data in atProtocol\nfinal atClientManager = await AtClientManager.getInstance() .setCurrentAtSign(‘@alice, \u0026#39;me\u0026#39;, AtClientPreference()); var atClient = atClientManager.atClient; var phoneKey = AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;@bob\u0026#39;) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Self data Self data is created for self. If @bob creates data for self, only @bob and no one else can see the data.\nGood examples of self data are “passwords” and “financial data”. We keep these details to ourselves.\nEncryption of self data\nWhen @bob creates data for self it is encrypted using @bob’s self encryption key.\nCreating a self key in atProtocol\nvar selfKey = AtKey.self(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build(); Persisting self data in atProtocol\nfinal atClientManager = await AtClientManager.getInstance() .setCurrentAtSign(‘@alice, \u0026#39;me\u0026#39;, AtClientPreference()); var atClient = atClientManager.atClient; var phoneKey = AtKey.self(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value);  All of the above rules are implemented and exposed using the validate() method on AtKey. These rules are enforced during creation of the data.  Key attributes of atProtocol data\nTTL - Time to live\nTTL (Time To Live) is the duration of time for which the key will be available. TTL is expressed in milliseconds. Adding TTL during the key creation results in the time at which the key expires.\n// Below key expires in 1 minute var phoneKey = (AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;bob\u0026#39;) ..timeToLive(60000)) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Scan/List behavior with TTL A key whose ttl has been set will be listed until a background job that runs at frequent time intervals deletes all the expired keys\nLookup/Get behavior with TTL As long as the key has not expired, a “lookup” of the key returns the value that was set originally. After the key expiry, ‘null’ is returned when the key is looked up for a value.\nTTB - Time to birth\nTTB (Time To Birth) is the span of time within which the key’s value is not available. TTB is expressed in milliseconds. Adding TTB during the key creation results in the time at which the key\u0026rsquo;s value is available.\n// Below key is available after 1 minute var phoneKey = (AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;bob\u0026#39;) ..timeToBirth(60000)) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Scan/List behavior with TTB\nA key whose ttb has been set will be listed.\nLookup/Get behavior with TTB\nUntil the key’s TTB is met, a “lookup” of the key returns ‘null’. After which the original value of the key is returned.\nTTR - Time to refresh\nTTR (Time To Refresh) is the span of time that represents the time interval at which the cached key will be refreshed with a new value(if the original key\u0026rsquo;s value is updated). TTR is expressed in seconds. Further, TTR can also be set to \u0026lsquo;-1\u0026rsquo; which represents the value of the original key will not be updated and therefore the cached key need not be refreshed.\nCacheability\nAll of the data created resides in the secondary server of an atSign. The owner of an atSign can choose to allow the public and the shared data to be cached in the another atSign\n// Below key refreshes everyday // TTR accepts time units in seconds var phoneKey = (AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;bob\u0026#39;) ..cache(86400, true)) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Scan/List behavior with TTR\nAll the keys with TTR and the cached keys that are created as a result of TTR are listed.\nLookup/Get behavior with TTR\nDuring lookup of a key, fetches for availability of the corresponding cached key. If a cached key is available, the value is returned. If cached is not available, fetches the value from the original key.\nUpdate behavior with TTR Only the owner of the key reserves the right to update the value. Updating the cached key’s value is prohibited.\nPropagation of an update to the cached key\nWhen an original key is updated by the creator, the ones who have cached it need to update the cached copy too. This can happen in two ways:\n The Auto-Notify notifies the updated value to another atSign, thereby the cached key’s value is updated. The refresh job in the secondary server  CCD - Cascade delete\nCCD (Cascade delete) compliments the TTR functionality by allowing the owner of the key to decide if the cached key has to be deleted upon the deletion of the original key. CCD accepts a boolean value(either true (or) false). When set to true, upon deletion of the original key, the cached key is also deleted. Setting false results in the cached key remains intact even after the origi\natProtocol CRUD operations\nCreate/Update Data SDK of atProtocol exposes two methods to create the data. They are:\n put putMeta  put\nUpdate’s value of key is if it is already present. Otherwise creates a new key.\nTo share a key to another atSign, use AtKey.shared() factory method or populate AtKey.sharedWith with the atSign to whom the data has to be shared. Further, notifies the sharedWith atSign that a key has been created.\nSignature\nFuture\u0026lt;bool\u0026gt; put(AtKey key, dynamic value);\nAccepts an instance of AtKey and value and stores it in the local storage(local secondary) has a key-value pair.\nAtKey represents the key against which the value will be stored. It further describes to whom the data is shared and metadata of the key. key rules\nThe value can be either a textual information or a binary data (e.g. Images, Files etc ). Returns a boolean value that represents the status of the put method. Returns ‘TRUE’ when put is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nputMeta\nUpdates the metadata of the key.\nSignature\nFuture\u0026lt;bool\u0026gt; putMeta(AtKey key);\nAccepts an Instance of AtKey. The Metadata is encapsulated in the AtKey. Set the new/updated metadata to [Atkey.Metadata].\nReturns a boolean value that represents the status of the putMeta method. Returns ‘TRUE’ when putMeta is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nRead Data\nget\nGet the value of the key from the user\u0026rsquo;s cloud secondary. Signature Future\u0026lt;AtValue\u0026gt; get (AtKey key);\nAccepts an Instance of AtKey. The Metadata is encapsulated in the AtKey. Fetch both the value and metadata of the key.\nReturns a boolean value that represents the status of the ‘get’ method. Returns ‘TRUE’ when ‘get’ is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\ngetMeta\nGets the metadata of the key.\nSignature\nFuture \u0026lt;bool\u0026gt; getMeta(AtKey key);\nAccepts an Instance of AtKey. The Metadata is encapsulated in the AtKey. Gets the metadata of the key.\nReturns a boolean value that represents the status of the putMeta method. Returns ‘TRUE’ when getMeta is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nDelete Data\nDeletes the key.\nSignature Future\u0026lt;bool\u0026gt; delete(AtKey key);\nAccepts an Instance of AtKey. Deletes the key from the storage. If the key is shared with another atSign, notifies the other atSign on the deletion of the key.\nReturns a boolean value that represents the status of the delete method. Returns ‘TRUE’ when delete is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nList of Keys\ngetKeys\nGet all the keys stored in the user\u0026rsquo;s secondary in string format.\nSignature\nFuture \u0026lt;\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; getKeys({String? regex, String? sharedBy, String? sharedWith});\nIf regex is specified only matching keys are returned, giving you the flexibility to use different regexes for different types of data.\ngetAtKeys\nGet all the keys stored in the user\u0026rsquo;s secondary in [AtKey] format.\nSignature\nFuture \u0026lt;\u0026lt;List\u0026lt;AtKey\u0026gt;\u0026gt; getAtKeys({String? regex, String? sharedBy, String? sharedWith});\nIf regex is specified only matching keys are returned, giving you the flexibility to use different regexes for different types of data.\nNotification\n"}).add({id:60,href:"/docs/contribute/shortcodes/links/",title:"Links",description:"Links shortcodes used in atsign.dev",content:"\nAnchor Tag (a) #\rLinks in your paragraphs\n   Attribute Description     href The html href to the content when the link is clicked.   target (optional) \u0026ldquo;_blank\u0026rdquo; for new tab, \u0026ldquo;_self\u0026rdquo; for same frame (default, *use markdown for self links: [here](www.google.com)),   rel (optional) \u0026ldquo;canonical\u0026rdquo; for canonical links    Example #\ratsign.com  {{\u0026lt;arel=\u0026#34;canonical\u0026#34;target=\u0026#34;_blank\u0026#34;href=\u0026#34;https://atsign.com/\u0026#34;\u0026gt;}} atsign.com {{\u0026lt;/a\u0026gt;}} "}).add({id:61,href:"/docs/tutorials/at-dude/4_local_notification_services/",title:"Local Notification Service",description:"Documentation\n",content:"   TOC     Navigation Service   Dude Service   Dude Service Imports   Dude Service Properties   Local Notification   Local Notification imports   Properties of LocalNotificationService    They are three service classes in the dude app, they are NavigationServices(), DudeServices() and LocalNotificationServices(). In this code lab we will explore the properties of these classes.\nLocalNotificationService #\rThis class contains the configurations required to send in app notification on Android and IOS.\nimports #\rimport \u0026#39;dart:io\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter_local_notifications/flutter_local_notifications.dart\u0026#39;; import \u0026#39;package:timezone/data/latest.dart\u0026#39; as tz; import \u0026#39;package:timezone/timezone.dart\u0026#39; as tz; import \u0026#39;../screens/history_screen.dart\u0026#39;; import \u0026#39;navigation_service.dart\u0026#39;; The flutter_local_notification` package is used to send notifications.\nProperties of LocalNotificationService #\rclass LocalNotificationService { static final LocalNotificationService _notificationService = LocalNotificationService._internal(); factory LocalNotificationService.getInstance() { return _notificationService; } factory LocalNotificationService() { return _notificationService; } final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin(); LocalNotificationService._internal(); Future\u0026lt;void\u0026gt; initNotification() async {...} _requestIOSPermission() {...} /// Shows notification when dude is sent to the current atsign.  ///  /// Notification currently only works in app on android.  Future\u0026lt;void\u0026gt; showNotifications( int id, String title, String body, int seconds) async {...} } Similar to DudeService() this class is a singleton. Lines 13 and 14 instantiates the FlutterLocalNotificationsPlugin.\n"}).add({id:62,href:"/docs/tutorials/at-dude/2_model/",title:"Models",description:"Documentation\n",content:"   TOC     Dude Model   From Json   To Json   Other Methods   Profile Model    This app uses two model for data management, the dude model and the profile model.\nDude Model #\rThe dude model is a class that represent a dude or a message that will be sent to others on the atPlatform.The dude model class contains the following properties.\nclass DudeModel { late String id; String dude = \u0026#39;\u0026#39;; late String sender; late String receiver; late DateTime timeSent; late Duration duration; DudeModel({ required this.id, required this.dude, required this.sender, required this.receiver, required this.timeSent, required this.duration, }); } ... The value of these properties will be sent to the atPlatform as a string.\nThe receiver and sender properties are necessary for the atPlatform to determine on will send and receive the data and on whose server the data will be saved.\nThe duration property will determine which voiceover will be played. A voiceover will be played to reflect the duration of the dude message.\nFrom Json #\r... DudeModel.fromJson(Map\u0026lt;String, dynamic\u0026gt; json) : this( id: json[\u0026#39;id\u0026#39;] as String, dude: json[\u0026#39;dude\u0026#39;] as String, sender: json[\u0026#39;sender\u0026#39;] as String, receiver: json[\u0026#39;receiver\u0026#39;] as String, timeSent: DateTime.parse((json[\u0026#39;timeSent\u0026#39;])) as DateTime, duration: Duration(milliseconds: json[\u0026#39;duration\u0026#39;]) as Duration); ... This method converts the json received from the atPlatform to the DudeModel() class.\nTo Json #\r... Map\u0026lt;String, dynamic\u0026gt; toJson() { return { \u0026#39;id\u0026#39;: id, \u0026#39;dude\u0026#39;: dude, \u0026#39;sender\u0026#39;: sender, \u0026#39;receiver\u0026#39;: receiver, \u0026#39;timeSent\u0026#39;: timeSent.toIso8601String(), \u0026#39;duration\u0026#39;: duration.inMilliseconds, }; } ... This method converts the DudeModel() instance into a Map.\nOther Methods #\r... void saveId() =\u0026gt; id = const Uuid().v4(); void saveDude(String value) =\u0026gt; dude = value; void saveSender(String value) =\u0026gt; sender = value; void saveReceiver(String value) =\u0026gt; receiver = value; void saveTimeSent() =\u0026gt; timeSent = DateTime.now(); ///Record the duration of a dude.  /// Record the length of a dude use want to send.  void saveDuration(DateTime startTime) { duration = DateTime.now().difference(startTime); } ... These methods will save the values received from the app and save it to an instance of the DudeModel() that will be sent to the atPlatform.\nProfile model #\rThis model keeps track of the number of dudes sent, the number of hours spend duding and the duration of the longest dude.\nclass ProfileModel { late String id; int dudesSent = 0; Duration dudeHours = const Duration(milliseconds: 0); Duration longestDude = const Duration(milliseconds: 0); ProfileModel({ required this.id, required this.dudesSent, required this.dudeHours, required this.longestDude, }); ProfileModel.newDude(); Map\u0026lt;String, dynamic\u0026gt; toJson() { return { \u0026#39;id\u0026#39;: id, \u0026#39;dudesSent\u0026#39;: dudesSent, \u0026#39;dudeHours\u0026#39;: dudeHours.inMilliseconds, \u0026#39;longestDude\u0026#39;: longestDude.inMilliseconds, }; } ProfileModel.fromJson(Map\u0026lt;String, dynamic\u0026gt; json) : this( id: json[\u0026#39;id\u0026#39;] as String, dudesSent: json[\u0026#39;dudesSent\u0026#39;] as int, dudeHours: Duration(milliseconds: json[\u0026#39;dudeHours\u0026#39;]) as Duration, longestDude: Duration(milliseconds: json[\u0026#39;longestDude\u0026#39;]) as Duration, ); // @override  // String toString() {  // return \u0026#39;ProfileModel(id: $id, dude: $dude, sender: $sender, receiver: $receiver, timeSent: $timeSent, duration: $duration)\u0026#39;;  // }  void saveId(String value) =\u0026gt; id = value; void saveDudesSent(int value) =\u0026gt; dudesSent = value; void saveDudeHours(Duration value) =\u0026gt; dudeHours = value; void saveLongestDude(Duration value) =\u0026gt; longestDude = value; bool getChampionStats() { return longestDude \u0026gt;= const Duration(hours: 1); } } "}).add({id:63,href:"/docs/tutorials/at-dude/3_navigation_service/",title:"Navigation Service",description:"Documentation\n",content:"   TOC     Navigation Service   Dude Service   Dude Service Imports   Dude Service Properties   Local Notification   Local Notification imports   Properties of LocalNotificationService    They are three service classes in the dude app, they are NavigationServices(), DudeServices() and LocalNotificationServices(). In this code lab we will explore the properties of these classes.\nNavigationService #\rimport \u0026#39;package:flutter/material.dart\u0026#39;; class NavigationService { static GlobalKey\u0026lt;NavigatorState\u0026gt; navKey = GlobalKey(); static GlobalKey\u0026lt;NavigatorState\u0026gt; nesteNavKey = GlobalKey(); } This Class contains two static properties of type GlobalKey. It allows us to get the current context without being inside a builder method.\n"}).add({id:64,href:"/docs/sdk/flutter/services_and_managers/onboarding/",title:"Onboarding",description:"Documentation\n",content:"Overview #\rThe atPlatform uses secret keys for authenticating an atSign as cryptographically secure replacement for usernames and passwords.To make developers life easier atPlatform offers at_onboarding_flutter package which handles secure management of secret keys.If you are developing a new atPlatform app, we recommend that you use at_app which can create atPlatform app template that already contains onboarding in it.\nUsage #\rBefore using the onboarding widget, ensure that your AtClientPreference is properly assigned. If you need an appAPIKey please email us at.\nOnboarding( context: context, atClientPreference: atClientPreference!, domain: AtEnv.rootDomain, rootEnvironment: AtEnv.rootEnvironment, appAPIKey: AtEnv.appApiKey, onboard: (value, atsign) { _logger.finer(\u0026#39;Successfully onboarded $atsign\u0026#39;); }, onError: (error) { _logger.severe(\u0026#39;Onboarding throws $error error\u0026#39;); }, nextScreen: const HomeScreen(), ); }, child: const Text(\u0026#39;Onboard an atSign\u0026#39;), ), "}).add({id:65,href:"/docs/tutorials/at-dude/7_onboarding/",title:"Onboarding",description:"Documentation\n",content:""}).add({id:66,href:"/docs/contribute/shortcodes/panel/",title:"Panel",description:"Panel shortcodes used in atsign.dev",content:"\npanel/feature #\rA large format feature panel.\n   Attribute Description     class Additional css classes to apply to the panel   title Title to be displayed in the panel   footnote Optional text to be displayed below the inner text   img-src The src for the img element.   img-type The type of image, can be one of \u0026lsquo;page\u0026rsquo;, \u0026lsquo;asset\u0026rsquo;, or \u0026lsquo;remote\u0026rsquo; (default)   img-class Additional css classes to apply to the img tag.   img-right Whether the image should be positioned to the right side or not   theme The color theme for this, can be one of \u0026lsquo;gray\u0026rsquo;, \u0026rsquo;light\u0026rsquo;, or \u0026lsquo;clear\u0026rsquo; (default)    Example #\r Option 1: Clear This panel is an example of the clear theme with its image positioned to the right. Try mixing and matching different themes and orientations to make a page look more visually appealing. Use footnotes to add captions to an image or additional context\n   Option 2: Gray This panel is an example of the gray theme with its image positioned to the left. Make sure that you omit the img-right attribute to get the orientation of the image to appear on the left side. Use footnotes to add captions to an image or additional context\n    Option 3: Light This panel is an example of the light theme with its image positioned to the left. Use footnotes to add captions to an image or additional context\n  {{\u0026lt;panel/featuretitle=\u0026#34;hello\u0026#34;footnote=\u0026#34;foot\u0026#34;img-src=\u0026#34;https://wavi.ng/assets/img/wavimetalogo.jpeg\u0026#34;theme=\u0026#34;clear\u0026#34;img-class=\u0026#34;bg-white\u0026#34;img-right=\u0026#34;true\u0026#34;\u0026gt;}} test {{\u0026lt;/panel/feature\u0026gt;}} "}).add({id:67,href:"/docs/tutorials/dess/aws/2-prerequisites/",title:"Pre-requisites",description:"Documentation\n",content:" Registered atSign(s) to setup An AWS account A Fully Qualified Domain Name (FQDN)  1. Registering your atSign #\rThis topic is already well documented. Please follow the guidance of Our FAQs and register via the registrar site.\n2. Sign-up for AWS account #\rIf you are new to AWS, signing up for an account is free! The cost of running dess is about 10$/month. You can create your account at Amazon Web Services and as of June 6th, 2021 there is a “free tier” available which was used during the making of this guide.\naws-free-trial\nFollow the instructions on screen.\naws-sign-up\nOnce you are done with registration, you will be able to login to your aws console.\nMake sure that you select the correct region in the top right corner.\naws-region\nSelect the region that is geographically closest to your location for best performance.\nYou are now setup on AWS and ready to prepare dess.\n3. Register your own fully qualified domain name (FQDN) #\rThis step can be performed at a variety of sites, all with different pricing models. You can use sites like Go Daddy, Namecheap, and many others. However, since we have AWS account, we can use it to register our domain through the Route 53 service.\nIn your AWS console navigate to services in top left corner and select Route 53.\na) Register domain name with AWS. #\rIn your AWS console search for Route 53.\nYou can start looking for your domain directly from here:\nBased on the domain name you search, AWS will give you similar options, and their pricing. As I am looking for the best deal, the .link domain seems like a good option at a cost of 5$ / year.\nIn my case 4atsign.link is free and I will register it by clicking “Add to cart” and continue.\nFill out DNS registration form:\nContinue review details and order. At this point if all is fine you should see your domain request pending:\nThis can take some time so why don’t we move on to next step!\n"}).add({id:68,href:"/docs/tutorials/dess/gcp/2_prerequisites/",title:"Pre-requisites",description:"Documentation\n",content:" Register Atsign at atsign.com Have google account Have registered Fully Qualified Domain Name (FQDN)  1. Registering your atSign #\rThis topic is already well documented. Please follow the guidance of Our FAQs and register via the registrar site.\n2. Sign-up for GCP account #\ra) Account Creation #\rIf you are new to cloud like me and need to create new GCP account, I have good news! The creation is for free. As promotion all new customer will also receive 300$ as credit. That is more than enough to run multiple dess’s for 3 months of offer validity.\n\r\r\rYou can register with your gmail account or create new one by clicking “Get started for free” and follow instructions to register\n\rOnce done with registration you will be able to login to your console.cloud.google.com And voila you have your GCP account up and running.\nb) Setting up billing #\rTo be able to run some services you have to maintain billing account. Navigation Menu -\u0026gt; Billing\n\rBy default GCP creates “My Billing Account” which you can link to your project.\n\r\r\rClick “Link Billing account” and select “My billing account” from drop down\n🔴 Its important to note that this account holds your 300$ free credits! 🔴\nWe are all setup and ready to go deploy!\n3. Register your own fully qualified domain name (FQDN) #\rThis step can be performed at range of different sites with different pricing models. You can use sites like godaddy.com; namecheap.com; and many others. Since we have GCP account we can use it to register our domain through Cloud Domain.\na) Register domain name with GCP. #\rIn your GCP console search for Cloud Domain.\n\r\r\rWe first need to enable this service.\n\r\r\rOnce the service activates you will be presented with its dashboard.\nLets register our fully qualified domain name (FQDN) that will be used for registration of our dess.\nClick on “Register Domain” and look for suitable name.\n\r\r\rReviewing pricing options of GCP .pw is their cheapest option which will work for testing. For my test case I am selecting atsign.pw with price $0.75 / month by clicking add to cart button and continue.\n\r\r\rNext we can select where will our DNS record be hosted. Simply select “Use Google Domains” and DNSSEC “Enabled” and click continue.\n\r\r\rWe have no options with Privacy protection so simply click continue.\n\r\r\rFill out contact details and click register. This will trigger registration email you will have to verify.\n\r\r\rOnce you verify your email your domain should be ready to use\n\r\r\rb) Create Cloud DNS zone #\rNext step is to enable Cloud DNS service. Search for DNS in search bar and select Cloud DNS\n\rIf its your first time activating this service you will have to enable the API. Press enable and wait for the activation to finish.\n\r\r\rLets crate new DNS zone by clicking “Create Zone”\n\r\r\rWe will select zone type as Public since we will be connecting to our DNS from internet and provide your registered DNS name. In my case atsign.pw. DNSSEC will be set to off and provide some meaningful Description. Once you filled all your details press create.\n\r\r\rYou should receive following message:\n\r\r\r"}).add({id:69,href:"/docs/tutorials/dess/rpi/2-prerequisites/",title:"Pre-requisites",description:"Documentation\n",content:" Registered atSign(s) to setup A No-IP account A Fully Qualified Domain Name (FQDN) Raspberry Pi (model 3B+ used for this tutorial)  1. Registering your atSign #\rThis topic is already well documented. Please follow the guidance of Our FAQs and register via the registrar site.\n2. Check if your IP address is static or dynamic #\rIn case it is static, you can skip the rest of this step. Otherwise, if you have a dynamic address, keep reading:\nYou will need to setup an account on a Dynamic DNS (DDNS) service. Dynamic DNS are a service which allows us to associate our public IP address to a domain. In this case, we will use it to be able to reach our home IP address in a simpler way (eg: instead of connecting to \u0026lsquo;203.0.113.206\u0026rsquo;, we can connect to \u0026rsquo;example.ddns.com\u0026rsquo;).\nWe will use No-IP service for this tutorial. Firstly, you need to sign up for an account:\nYou can check the \u0026lsquo;Create my hostname later\u0026rsquo; box, as we will also configure it.\nClick on \u0026lsquo;Free Sign Up\u0026rsquo; button: Now you will need to activate your account via email: After that, navigate again to https://my.noip.com/ and select No-IP Hostnames: Click on \u0026lsquo;Create a Hostname\u0026rsquo;. Choose a Hostname you like, and one of the free options in de Domain menu. Leave the \u0026lsquo;Record Type\u0026rsquo; on \u0026lsquo;DNS Host (A)\u0026rsquo; and the IPv4 Address field empty, and click on \u0026lsquo;Create Hostname\u0026rsquo;: We will end the No-IP configuration later.\n3. Register your own fully qualified domain name (FQDN) #\rThis step can be performed at a variety of sites, all with different pricing models. You can use sites like Go Daddy, Namecheap, and many others. The following configuration has been done in Cloudflare: On the DNS panel, click on \u0026lsquo;Add record\u0026rsquo;: And create a CNAME record which points to your No-IP Hostname: We can now go to the next steps.\n"}).add({id:70,href:"/docs/tutorials/dess/aws/3-prep-aws-instance/",title:"Preparing AWS Instance",description:"Documentation\n",content:"Now since I am new to AWS, the easiest way to get started is by using the LightSail service from service catalog. This will enable you to deploy small system which is more then capable of handling dess at pre-set price.\nWelcome to LightSail:\nFirst step is to create new instance. Fortunately, we have big orange button that can do just that!\nThere are several options we are presented at this moment. Since I am living in Europe I select “Frankfurt, Zone A (eu-central-1a)” as my instance location. Instance region will dictate how well will your instance response based on your geographical location. People located in India should selects APAC region where as people in US should select North America region. You can leave availability zone set as default.\nNext up will be selection of operating system we want to deploy. We know that dess works well with Ubuntu 20.04 LTS so lets select just that.\nYou are presented with couple more options, but unless you know what you are doing leave these as is.\nNow let’s select instance plan. dess is relatively light weight so for testing purposes I will select first instance plan for 3.5$/Month. This will provide us with 512 MB of RAM, 1vCPU, 20GB of storage and 1TB of data transfer. This is more than enough to run our dess.\nLastly we have to name our instance. This is the name you will be presented with in your dashboard.\nLast but not least is to press “Create instance”\nAfter a couple of seconds you should be re-routed to your dashboard and see your instance up and running:\n"}).add({id:71,href:"/docs/tutorials/dess/gcp/3_prep_aws_instance/",title:"Preparing GCP Instance",description:"Documentation\n",content:"Now since I am new to GCP the easiest way to start using it is with prebuild solutions. This way you will deploy small system which is more then capable of handling dess at pre-set price.\nWe can use pre-build “Ubuntu 20”. In Search bar look for Ubuntu20\n\r🔴 Make sure to use “Ubuntu 20” and not “Hardened Ubuntu 20”. Although the Hardened version will work as well it requires additional manual steps to make work.🔴\n​\nThis will take you to this prebuild solution overview page:\n\r\r\rSelect launch\n\r\r\rAnd press enable all required API’s\n\r\r\rOnce all API’s are activated you are taken to configuration page:\n\r\r\rPrices are based on region and power of selected Virtual Machine (VM). To cost optimize you can select US region / N1 / g1-small at cost of $15/Month.\nNext up is boot disk which we can leave as is.\n\r\r\rThis will deploy your Ubuntu 20.04 virtual machine.\n\r\r\r"}).add({id:72,href:"/docs/tutorials/dess/rpi/4-prep-rasp/",title:"Preparing Raspberry Pi configuration",description:"Documentation\n",content:"For this part of the tutorial, I\u0026rsquo;m going to be using a Raspberry Pi model 3B+, although some other Raspberry Pi which runs an OS version compatible with dess will also work. This time we are going to be using Raspbian (Raspberry Pi OS Lite (32-bit) version), along with the Raspberry Pi Imager program, which will help us to install the OS.\nFirst of all, we need to download the Raspberry Pi Imager program for our current PC OS: We can install the Lite or the Full version. I will be using the Lite one: It is important that we configure SSH, as we will be using it to connect to the device. It is highly recommendable to configure it with public-key authentication (for security reasons), but you can also configure it with username and password (which is not secure). We can also configure other things, such as a wireless network, or a username/password for the system. If you are going to be using the device connected to the Ethernet, I would not recommend configuring the wireless network.\nIf you configure the wireless network and then decide to connect it to your network through Ethernet, you may experience some network related errors in the next steps (dess installation). In that case, you can run:\nip addr sh  To see your interfaces (typically, eth0 and wlan0), and:\nip link set wlan0 down  To shutdown your wireless network interface, so the installation can run properly. You can enable it again by substituting \u0026lsquo;down\u0026rsquo; by \u0026lsquo;up\u0026rsquo; in the previous command.\nFinally, introduce the SD-card into your computer, select it, and write the OS to the SD-Card (all content will be formatted in the process): After the installation ends, we can continue with the next step.\n"}).add({id:73,href:"/docs/tutorials/dess/rpi/3-prep-router-config/",title:"Preparing router configuration",description:"Documentation\n",content:"Now we will need to do the proper configuration in our home router. We will need to do two things:\n Open port 80, and a port for the dess (typically 6464) Associate Dynamic DNS to No-IP  After logging in into the home router (In my case, navigating to \u0026ldquo;192.168.1.1\u0026rdquo; in any web browser. You will find that information on the back of your router), We can start the configuration. We will need to know the local IP assigned to our Raspberry Pi (which can be also seen in the router configuration page).\nFirstly, we will open the ports we need. Port 80 needs to be opened so Certbot can provide us with a certificate from Let\u0026rsquo;s Encrypt.\nThis is an example of both ports opened for our Raspberry Pi\u0026rsquo;s local IP: After that, we now need to configure the Dynamic DNS (DDNS) service. Some newer routers let the users choose a popular service (such as No-IP) directly from a list (as in the following example image), but if that is not our case, we can just provide the router with the direction of the service. That is all we will need to configure in our router.\n"}).add({id:74,href:"/docs/tutorials/dess/aws/4-prep-network-access/",title:"Preparing your instance for network access",description:"Documentation\n",content:"Assignment of Static IP #\rNext up, is to provide our instance with a static IP and linking our domain to it.\nWhen you click on your instance name, it will take you to the management console, which should look like this:\nThis is where you control hardware, connectivity and if needed can delete your instance.\nLets configure a static IP address for your new instance. Navigate to Networking and click on Create static IP:\nOur region and instance is selected, so the only thing left is to name our static IP. I selected the name atsign-static, but it can be any name you like.\nLets hit create:\nAnd voila, we now have a static IP address on the internet and it will not change. Now we can link our domain name with it.\nWhen you click on your instance name and navigate to Networking, the static IP is now assigned.\nAssignment of Domain name to your static IP #\rWe can now move on to linking our static IP address to our domain. This is done via the AWS console which can be accessed in the top right of Lightsail.\nVerify your email used for registering domain:\nBy now you should receive verification email that will confirm registration of your domain. Click this link before moving on.\nLinking domain with your static address:\nLets navigate to “Route 53” from Services menu.\nFrom your dashboard click on “Domain” which will take you to the “Registered Domains” tab.\nHere you can click on your registered domain which will take you to overview page with domain status and contacts.\nClick on “Manage DNS”\nAnd click on your domain name.\nThis will show you your DNS records for your domain. We now need to link A type record to your domain linking it to IP address of your instance.\nThis is done simply by typing your static IP address from previous step into field “Value” and clicking Create record:\nIf everything goes well you should see following in your domain dashboard:\nTo test if you are successful open command line and ping your domain. You should see your instance static IP address. It will not respond which is normal due to IPv4 firewall. It is actually good thing!\nAt this point we have created DNS record we will use to link our dess, we created instance name which will be running our dess and we have opened port range which is exposed to the internet and we can communicate with atSign root server and our apps with.\nSetting up Firewall #\rNext up we need to make sure we have ports open for our dess to communicate with root server and our apps. In Section networking go to section “IPv4 Firewall” and click “+ Add rule” Our rule will be “Custom” on TCP protocol with Port range in number higher then 1024. In my case I have selected port range 8000-8010. This will enable me to run up to 10 atSigns in parallel.\nClick create and verify that your new rule is in list:\n"}).add({id:75,href:"/docs/tutorials/dess/gcp/4_prep_network_access/",title:"Preparing your instance for network access",description:"Documentation\n",content:"a) Assignment of Static IP #\rNext up our list of activities is providing our instance with static IP and linking our domain to it.\nGCP assigned ephemeral IP address to our newly created VM. We need to change it to static IP.\nIn search bar look for External IP addresses.\n\rYou should see your external IP address assigned to your VM\n\r\r\rIn column Type select ephemeral and change it to Static\n\rGive your static IP name and some description.\n\r\r\rType should now say Static\n\rb) Assignment of Domain name to your static IP #\rNext step is to point your domain to your virtual machine running dess.\nSearch for Cloud DNS\n\rOpen zone you have created in step 3.b Create Cloud DNS zone\n\r\r\rWe now need to link A type record to your domain linking it to IP address of your Virtual machine.\nThis is done simply press “Add record set”\n\r\r\rSelect Resource record type “A” and IPv4 address the address of your dess virtual machine.\n\r\r\rIf everything goes well you should see following in your domain dashboard:\n\r\r\rNext step is to update Google Name servers. You can follow Googles guide - step 5.\nhttps://cloud.google.com/dns/docs/tutorials/create-domain-tutorial#register-domain\nTo test if you are successful open command line and ping your domain. You should see your instance static IP address.\n\r\r\rAt this point we have created DNS record we will use to link our dess, we created instance name which will be running our dess and we have opened port range which is exposed to the internet and we can communicate with atSign root server and our apps with.\nc) Setting up Firewall #\rSearch for Firewall in search bar.\n\rClick on Create firewall rule\n\r\r\rLets create firewall rule that will enable the atSign root server communicate with our dess.\n\r\r\rImportant things to note:\nIngress translates to incoming traffic.\nSelecting IP range as 0.0.0.0/0 will allow traffic from anywhere on the internet.\nFor my use case I will enable port range 8000 – 8010 allowing me to register up to 10 atSigns.\n\r\r\rPress create and validate that your new rule appears in list of firewall rules.\n\r\r\rSecond we need to create firewall rule that will enable your dess server to communicate with certification authority.\n\r\r\rImportant things to note:\nIngress translates to incoming traffic.\nSelecting IP range as 0.0.0.0/0 will allow traffic from anywhere on the internet.\nYou need to enable port 80 for communication with Certification authority.\n\r\r\rPress create and validate that your new rule appears in list of firewall rules.\n\r\r\r"}).add({id:76,href:"/docs/tutorials/at-dude/10_profile_screen/",title:"Profile Screen",description:"Documentation\n",content:""}).add({id:77,href:"/docs/tutorials/dess/aws/6-registration/",title:"Registration of atSign in your private dess",description:"Documentation\n",content:"At this step you should already have your atSign registered at atsign.com. If not go do it!\nI have registered my own free atSign (@44likelycanary) which I will link to my dess.\nIn your instance console, navigate to dess folder. If you were following this guide it will be located in:\nWe now need to create the service that will host our atSign by executing the dess-create command:\n$ sudo dess-create @44likelycanary 4atsign.link 8000 \u0026lt;email address\u0026gt; likelycanary\nTo make it more understandable:\nI will be registering my atSign @44likelycanary.\nI will be using my domain 4atsign.link which I have registered through AWS.\nI am using port 8000 which I have opened in my instance firewall.\nMy registration email address is (this email is used to sign the SSL certificates).\nThe last likelycanary is the name that docker will use to track the service.\nIf everything is successful you should see output like this:\nAt this moment your atSign is registered on your dess.\n"}).add({id:78,href:"/docs/tutorials/dess/gcp/6_registration/",title:"Registration of atSign in your private dess",description:"Documentation\n",content:"At this step you should already have your atSign registered at atsign.com. If not go do it!\nI have registered my own free atSign (@44likelycanary) which I will link to my dess.\nIn your instance console, navigate to dess folder. If you were following this guide it will be located in:\nWe now need to create the service that will host our atSign by executing the dess-create command:\n$ sudo dess-create @44likelycanary 4atsign.link 8000 \u0026lt;email address\u0026gt; likelycanary\nTo make it more understandable:\nI will be registering my atSign @44likelycanary.\nI will be using my domain 4atsign.link which I have registered through AWS.\nI am using port 8000 which I have opened in my instance firewall.\nMy registration email address is (this email is used to sign the SSL certificates).\nThe last likelycanary is the name that docker will use to track the service.\nIf everything is successful you should see output like this:\n\r\r\rAt this moment your atSign is registered on your dess.\n"}).add({id:79,href:"/docs/tutorials/dess/rpi/6-registration/",title:"Registration of atSign in your private dess",description:"Documentation\n",content:"Now, we will proceed to install dess, following the official instructions. Make sure curl is installed, we will use curl to pull the dess installation file:\nsudo apt install curl  Finally, run the dess installer:\ncurl -fsSL https://getdess.atsign.com | sudo bash  Once the installer is finished you should be prompted like so:\nDess installed, please move on to the sudo dess-create command.\nAt this step you should already have your atSign registered at atsign.com. If not go do it!\nI have registered my own free atSign (@44likelycanary) which I will link to my dess.\nIn your instance console, navigate to dess folder. If you were following this guide it will be located in:\nWe now need to create the service that will host our atSign by executing the dess-create command:\nsudo dess-create \u0026lt;@your-atSign\u0026gt; \u0026lt;your-domain\u0026gt; \u0026lt;opened-port\u0026gt; \u0026lt;email-address\u0026gt; \u0026lt;service-name: your atsign with no '@'\u0026gt;```  For instance: sudo dess-create @44likelycanary 4atsign.link 8000 tutorial@example.com likelycanary\nTo make it more understandable:\n  I will be registering my atSign @44likelycanary.\n  I will be using my domain 4atsign.link which I have registered.\n  I am using port 8000 which I have opened in my router firewall (typically 6464, but as we can see, it can be any other).\n  My registration email address is tutorial@example.com (this email is used to sign the SSL certificates).\n  The last likelycanary is the name that docker will use to track the service.\n  If everything is successful you should see output like this:\nAt this moment your atSign is registered on your dess.\n"}).add({id:80,href:"/docs/tutorials/at-dude/8_send_dude_srcreen/",title:"Send Dude Screen",description:"Documentation\n",content:""}).add({id:81,href:"/docs/tutorials/dess/rpi/",title:"Setup dess on a Raspberry Pi",description:"Learn how to setup dess on a Raspberry Pi\n",content:""}).add({id:82,href:"/docs/contribute/shortcodes/spacing/",title:"Spacing",description:"Spacing shortcodes used in atsign.dev",content:"\nLine Break (br) #\rInsert a simple line break.\nExample #\rSome text here and then a line break.\nSome text here {{\u0026lt;br\u0026gt;}} and then a line break. "}).add({id:83,href:"/docs/contribute/shortcodes/superscripts/",title:"Superscripts",description:"Superscripts with links",content:"\nSuperscripts (sup) #\rSuperscript go next to text.\nExample #\rRegular TextSuperscript\nRegular Text{{\u0026lt;sup\u0026gt;}}Superscript{{\u0026lt;/sup\u0026gt;}} "}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()